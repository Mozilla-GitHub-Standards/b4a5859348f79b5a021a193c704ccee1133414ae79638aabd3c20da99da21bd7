<?xml version='1.0'?>
<!DOCTYPE bindings [
<!ENTITY % translate SYSTEM "../translator.dtd">
%translate;
]>
<bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="button">

    <implementation implements="nsIDOMEventListener, nsIObserver, nsIMessageListener">
        <field name="contextMenu">document.getElementById('contentAreaContextMenu')</field>

        <field name="tooltipHTML">document.getElementById('aHTMLTooltip')</field>

        <field name="_tooltip"/>

        <field name="tooltip"><![CDATA[    this._tooltip || (this._tooltip = this.createTooltip());]]></field>

        <field name="_deactivateTimeoutId">null</field>

        <field name="_logger" readonly="true">this.module.API.logger</field>

        <field name="_showBalloonTimeoutId"/>

        <field name="EVENT_MESSAGE_NAME">'yasearch@yandex.ru:translator:event'</field>

        <constructor><![CDATA[    if (!this.module) {
        return;
    }
    this.listenToVisibilityChange(true);
    this._windowListener = this.module.API.Browser.getWindowListener(window);
    this._windowListener.addListener("WindowLocationChange", this);
    this._windowListener.addListener("PageHide", this);
    window.messageManager.addMessageListener(this.EVENT_MESSAGE_NAME, this);]]></constructor>

        <destructor><![CDATA[    window.messageManager.removeMessageListener(this.EVENT_MESSAGE_NAME, this);
    this.clearShowTimeout();
    this.clearDeactivateTimeout();
    if (this.request) {
        this.request.abort();
        this.request = null;
    }
    this.hideBalloon();
    this.listenToVisibilityChange(false);
    if (this._tooltip) {
        this._tooltip.removeEventListener("popupshown", this, false);
        this._tooltip.removeEventListener("popuphidden", this, false);
        this._tooltip.parentNode.removeChild(this._tooltip);
        this._tooltip.tooltipController = null;
        this._tooltip = null;
        this.tooltipHTML.removeEventListener("popupshowing", this, true);
    }
    if (this._windowListener) {
        this._windowListener.removeListener("WindowLocationChange", this);
        this._windowListener.removeListener("PageHide", this);
    }]]></destructor>

        <method name="receiveMessage">
            <parameter name="message"/>
            <body><![CDATA[    let {name, data, target, objects} = message;
    switch (data.type) {
    case "hideBalloon":
        if (data.doNotShowBalloon) {
            this.doNotShowBalloonNow();
        }
        this.hideBalloon();
        break;
    case "translate":
        this.translateIt({
            text: data.text,
            clientX: data.clientX,
            clientY: data.clientY,
            begin: data.begin,
            end: data.end,
            surroundingText: data.surroundingText
        });
        break;
    case "mouseout":
        if (!this.isPopupOpen(this.tooltip)) {
            this.doNotShowBalloonNow();
        }
        break;
    case "keyup":
        if (this.request && !this.request.doNotShow) {
            this.clearShowTimeout();
        }
        break;
    }]]></body>
        </method>

        <method name="listenToVisibilityChange">
            <parameter name="enable"/>
            <body><![CDATA[    [
        "deactivate",
        "visibilitychange"
    ].forEach(function (eventType) {
        if (enable) {
            window.addEventListener(eventType, this, false);
        } else {
            window.removeEventListener(eventType, this, false);
        }
    }, this);]]></body>
        </method>

        <method name="createTooltip">
            <body><![CDATA[    const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
    let tooltip = document.createElementNS(XUL_NS, "tooltip");
    tooltip.setAttribute("noautohide", "true");
    let osName = this.module.API.Environment.os.name;
    tooltip.setAttribute("yaIsLinux", osName === "linux");
    tooltip.style.MozBinding = "url('" + this.module.URI + "native/fx/translator/balloon.xbl#balloon')";
    tooltip.tooltipController = this;
    tooltip.addEventListener("popupshown", this, false);
    tooltip.addEventListener("popuphidden", this, false);
    document.getElementById("mainPopupSet").appendChild(tooltip);
    this.tooltipHTML.addEventListener("popupshowing", this, true);
    return tooltip;]]></body>
        </method>

        <method name="translateIt">
            <parameter name="aBalloon"/>
            <body><![CDATA[    if (this.isPopupOpen(this.tooltip) && this.balloon && this.balloon.text == aBalloon.text && this.balloon.begin == aBalloon.begin) {
        return true;
    }
    aBalloon = this.module._cache.restoreBalloon(aBalloon);
    this.balloon = aBalloon;
    this.__translateItCallTimestamp = Date.now();
    if (aBalloon.translations) {
        this.showBalloon(aBalloon);
    } else {
        let addonLocale = this.module.API.Environment.addon.locale;
        let localeLang = addonLocale && addonLocale.language || "en";
        let requestUrl = this.module.TRANSLATE_URL + "?text=" + encodeURIComponent(aBalloon.text) + "&from=all" + "&to=" + this.module.defaultLanguage + "&brid=" + this.module.brandId + "&locale=" + localeLang;
        if (this.request) {
            if (this.request.url === requestUrl) {
                return false;
            }
            this.request.abort();
        }
        this.request = Cc["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance(Ci.nsIXMLHttpRequest);
        this.request.url = requestUrl;
        let target = this.request.QueryInterface(Ci.nsIDOMEventTarget);
        target.addEventListener("load", this, false);
        target.addEventListener("error", this, false);
        this.request.open("GET", requestUrl, true);
        this.request.send(null);
    }
    return true;]]></body>
        </method>

        <method name="response">
            <parameter name="event"/>
            <body><![CDATA[    let request = event.target;
    let status = request.status;
    if (this.request === request) {
        this.request = null;
    }
    if (status < 200 || status > 399) {
        return;
    }
    let rxml = request.responseXML;
    let balloon = this.balloon;
    let errorElement = rxml.querySelector("error");
    let errorStatus = parseInt(errorElement && errorElement.getAttribute("status"), 10);
    if (errorStatus !== 0) {
        this.hideBalloon();
        return;
    }
    balloon.to = rxml.querySelector("to").textContent;
    balloon.request = rxml.querySelector("request").textContent;
    balloon.translations = {};
    Array.forEach(rxml.querySelectorAll("translations[from]"), function (translations) {
        let lang = translations.getAttribute("from");
        balloon.translations[lang] = [];
        Array.forEach(translations.querySelectorAll("translation"), function (translation) {
            let word = translation.getAttribute("word");
            let part = {};
            let parts = [];
            Array.forEach(translation.querySelectorAll("variant"), function (variant) {
                let partOfSpeech = variant.getAttribute("class");
                if (parts.indexOf(partOfSpeech) === -1) {
                    parts.push(partOfSpeech);
                    part[partOfSpeech] = [];
                }
                let variantStr = variant.textContent;
                if (part[partOfSpeech].indexOf(variantStr) === -1) {
                    part[partOfSpeech].push(variantStr);
                }
            });
            if (parts.length) {
                balloon.translations[lang].push({
                    word: word,
                    parts: parts,
                    part: part
                });
            }
        });
        let url = translations.querySelector("url");
        if (url) {
            balloon.translations[lang].url = url.textContent;
        }
    });
    this.module._cache.storeBalloon(balloon);
    if (request.doNotShow) {
        return;
    }
    this.showBalloon(balloon);]]></body>
        </method>

        <method name="showBalloon">
            <parameter name="balloon"/>
            <body><![CDATA[    if (!balloon.translations || Object.keys(balloon.translations).length === 0) {
        this.hideBalloon();
        return;
    }
    let show = function show() {
        if (this.isPopupOpen(this.contextMenu)) {
            this.hideBalloon();
            return;
        }
        if (this.isPopupOpen(this.tooltipHTML)) {
            this.tooltipHTML.hidePopup();
        }
        let tooltip = this.tooltip;
        let translationsJSON = JSON.stringify(balloon.translations);
        if (tooltip.getAttribute("data-translations") === translationsJSON) {
            return;
        }
        tooltip.setAttribute("data-translations", translationsJSON);
        tooltip.clearHideTimeout();
        tooltip.hidePopup();
        let surroundingTextLanguage = this.module.getTextLanguage(balloon.surroundingText);
        let langs = Object.keys(balloon.translations);
        langs.active = langs.indexOf(surroundingTextLanguage) !== -1 ? surroundingTextLanguage : langs[0];
        tooltip.langs = langs;
        tooltip.translations = balloon.translations;
        let {
            screenX: browserX,
            screenY: browserY
        } = gBrowser.boxObject;
        let x = browserX + balloon.clientX + 2;
        let y = browserY + balloon.clientY + 2;
        tooltip.openAtY = y;
        tooltip.openPopupAtScreen(x, y, false);
        this.module.logClickStatistics("word.show." + langs.active);
    }.bind(this);
    if (this.__translateItCallTimestamp) {
        let timeDiff = Date.now() + this.module.intervalShow - this.__translateItCallTimestamp;
        this.__translateItCallTimestamp = null;
        if (timeDiff < this.module.minShowBalloonInterval) {
            this._showBalloonTimeoutId = setTimeout(show, this.module.minShowBalloonInterval - timeDiff + 20);
            return;
        }
    }
    show();]]></body>
        </method>

        <method name="doNotShowBalloonNow">
            <body><![CDATA[    this.clearShowTimeout();
    if (this.request) {
        this.request.doNotShow = true;
    }]]></body>
        </method>

        <method name="hideBalloon">
            <body><![CDATA[    if (this._tooltip && this._tooltip.hidePopup) {
        this.tooltip.clearHideTimeout();
        this._tooltip.hidePopup();
    }]]></body>
        </method>

        <method name="clearShowTimeout">
            <body><![CDATA[    if (!this._showBalloonTimeoutId) {
        return;
    }
    clearTimeout(this._showBalloonTimeoutId);
    this._showBalloonTimeoutId = null;]]></body>
        </method>

        <method name="clearDeactivateTimeout">
            <body><![CDATA[    if (!this._deactivateTimeoutId) {
        return;
    }
    clearTimeout(this._deactivateTimeoutId);
    this._deactivateTimeoutId = null;]]></body>
        </method>

        <method name="isPopupOpen">
            <parameter name="aPopupNode"/>
            <body><![CDATA[    return aPopupNode && [
        "open",
        "showing"
    ].indexOf(aPopupNode.state || "") > -1;]]></body>
        </method>

        <method name="handleEvent">
            <parameter name="event"/>
            <body><![CDATA[    switch (event.type) {
    case "popupshown": {
            switch (event.target) {
            case this._tooltip:
                window.setTimeout(function () {
                    if (this._tooltip && this._tooltip.state === "open") {
                        this.module.API.Statistics.logShortAction(5510);
                    }
                }, 100);
                break;
            case this.tooltipHTML:
                if (this._tooltip && this.isPopupOpen(this._tooltip)) {
                    event.preventDefault();
                }
                break;
            default:
                break;
            }
            break;
        }
    case "popuphidden":
        if (event.target === this._tooltip) {
            this._tooltip.removeAttribute("data-translations");
        }
        break;
    case "load":
        this.response(event);
        break;
    case "error":
        break;
    case "deactivate":
    case "visibilitychange": {
            this.clearShowTimeout();
            this._deactivateTimeoutId = window.setTimeout(function _timedDeactivate() {
                if (typeof this.hideBalloon === "function") {
                    this.hideBalloon();
                }
            }.bind(this), 200);
            break;
        }
    default:
        break;
    }]]></body>
        </method>

        <method name="observe">
            <parameter name="aSubject"/>
            <parameter name="aTopic"/>
            <parameter name="aData"/>
            <body><![CDATA[    switch (aTopic) {
    case "PageHide":
    case "onWindowLocationChange":
        this.doNotShowBalloonNow();
        this.hideBalloon();
        break;
    default:
        break;
    }]]></body>
        </method>
    </implementation>
  </binding>
</bindings>
