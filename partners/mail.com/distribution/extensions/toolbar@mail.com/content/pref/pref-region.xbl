<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE bindings SYSTEM "chrome://unitedtb/locale/pref/pref-region-xbl.dtd">

<bindings id="pref-bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <binding id="region">
    <content>
      <xul:hbox align="baseline">
        <xul:label anonid="label" xbl:inherits="value=label" control="region-dropdown" />
        <xul:menulist anonid="region-dropdown"
            xbl:inherits="value"
            />
      </xul:hbox>
    </content>
    <implementation>
      <field name="mRegions">null</field>
      <constructor><![CDATA[
        try {
        Components.utils.import("resource://unitedtb/util/util.js", this);
        Components.utils.import("resource://unitedtb/main/brand-var-loader.js", this);
        loadJS("chrome://unitedtb/content/util/uiutil.js", this); // error()

        var labelE = document.getAnonymousElementByAttribute(this, "anonid", "label");
        if (!labelE.value)
          labelE.hidden = true;

        this.mRegions = [];
        /*
        var fileContent = readURLAsUTF8("chrome://unitedtb/content/regions.txt");
        fileContent = [ "de-DE;Deutschland", "de-AT;Österreich", "it-IT;Italia" ];
        for each (let line in fileContent)
        {
          let sp = line.split(";");
          let region = {};
          region.locale = sp[0]; // e.g. "de-AT"
          region.label = sp[1]; // e.g. "Österreich"
          this.mRegions.push(region);
        }
        */
        this.mRegions = brand.regions.list;
        for each (let region in this.mRegions)
          this.appendOption(region);
        if (this.mRegions.length < 2)
        {
          // this.hidden = true; this.setAttribute("hidden", "true"); // doesn't work
          this.dropdown.setAttribute("hidden", "true");
          labelE.setAttribute("hidden", "true");
          // also hide separate <label for="foo" /> on page, e.g. because of <grid>
          if (this.id)
          {
            let XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
            let allXULLabels = document.getElementsByTagNameNS(XUL_NS, "label");
            for (let i = 0, l = allXULLabels.length; i < l; i++)
              if (allXULLabels.item(i).getAttribute("control") == this.id)
                allXULLabels.item(i).setAttribute("hidden", "true");
            let XHTML_NS = "http://www.w3.org/1999/xhtml";
            let allHTMLLabels = document.getElementsByTagNameNS(XHTML_NS, "label");
            for (let i = 0, l = allHTMLLabels.length; i < l; i++)
              if (allHTMLLabels.item(i).getAttribute("for") == this.id)
                allHTMLLabels.item(i).setAttribute("hidden", "true");            
          }
        }

        var region = ourPref.get(this.prefName);
        if (!region)
          region = ourPref.get("region.general");
        if (!region)
          region = "de-DE";
        this.value = region; // TODO which one?
        this.dropdown.value = region;
        if (this.mRegions.length == 1 && this.dropdown.selectedIndex < 0)
          this.dropdown.selectedIndex = 0;

        var self = this;
        ourPref.observeAuto(window, this.prefName, function(newRegion)
        {
          self.value = newRegion;
          self.dropdown.value = newRegion;
        })
        } catch(e) { dump(e + "\n"); error(e); }
      ]]></constructor>
      <method name="appendOption">
        <parameter name="region"/>
        <body><![CDATA[
          this.dropdown.appendItem(region.label, region.locale);
        ]]></body>
      </method>
      <property name="dropdown"
          readonly="true"
          onget="return document.getAnonymousElementByAttribute(this, 'anonid',
               'region-dropdown');"/>
      <property name="prefName"
          readonly="true"
          onget="return 'region.' + this.moduleName;"/>
      <property name="moduleName"
          readonly="true"
          onget="return this.getAttribute('module');"/>
    </implementation>
    <handlers>
      <handler event="command"><![CDATA[
        dump("region for " + this.prefName + " changed to " + this.dropdown.value + "\n");
        ourPref.set(this.prefName, this.dropdown.value);
      ]]></handler>
    </handlers>
  </binding>
</bindings>
