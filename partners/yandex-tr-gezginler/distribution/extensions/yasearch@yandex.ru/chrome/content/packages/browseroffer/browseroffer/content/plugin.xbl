<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE bindings SYSTEM "../entities.dtd"><bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding extends="/-common/content/baseplugin.xbl#plugin-base" id="toolbarbutton">
        <implementation implements="nsIDOMEventListener, nsIObserver, nsIMessageListener">
            <field name="observers"><![CDATA[    ({
        "close-notification": function (topic, data) {
            if (data === "flash") {
                this._closeAllNotificationsWithName(this.NOTIFICATION_FLASH_NAME);
            } else if (data === "turbo") {
                this._closeAllNotificationsWithName(this.NOTIFICATION_TURBO_NAME);
            }
            let dataObj;
            try {
                dataObj = JSON.parse(data);
            } catch (e) {
                return;
            }
            if (dataObj.social && dataObj.widgetId) {
                this._closeAllNotificationsWithName(this.NOTIFICATION_SOCIAL_NAME, function (aNotification) {
                    if (aNotification.getWidgetID() !== dataObj.widgetId) {
                        return false;
                    }
                    aNotification.setUserAction();
                });
            }
        },
        "add-social-widget": function (topic, aWidgetId) {
            if (!aWidgetId) {
                return;
            }
            let recentWindow = this.application.getMostRecentBrowserWindow();
            if (window !== recentWindow) {
                return;
            }
            this._addWidgetOnToolbar(aWidgetId);
        },
        suggest: function (topic, data) {
            if (!data) {
                return;
            }
            let dataObj;
            try {
                dataObj = JSON.parse(data);
            } catch (e) {
                return;
            }
            if (typeof dataObj.contextMenu !== "undefined") {
                this._onContextMenuSettingChange(dataObj.contextMenu);
            }
            if (typeof dataObj.contextSuggest !== "undefined") {
                this._onContextSuggestSettingChange(dataObj.contextSuggest);
            }
        }
    });]]></field>

            <field name="NOTIFICATION_FLASH_NAME" readonly="true">'browseroffer-notification-flash'</field>
            <field name="NOTIFICATION_SOCIAL_NAME" readonly="true">'browseroffer-notification-social'</field>
            <field name="NOTIFICATION_TURBO_NAME" readonly="true">'browseroffer-notification-turbo'</field>
            <field name="EVENT_MESSAGE_NAME">'yasearch@yandex.ru:browseroffer:event'</field>

            <field name="api" readonly="true">this.application.api</field>

            <field name="_contextMenuSuggestIsActive">false</field>

            <field name="_contextMenu" readonly="true">document.getElementById("contentAreaContextMenu")</field>
            <field name="_menuItem">null</field>

            <field name="_windowListener" readonly="true">this.api.Browser.getWindowListener(window)</field>

            <field name="_browserofferOpenLinkLabel" readonly="true">'&browseroffer.menu.openLink;'</field>

            <constructor><![CDATA[    this.wdgtxConstructor();]]></constructor>

            <destructor><![CDATA[    this.ybwFinalize();]]></destructor>

            <method name="wdgtxConstructor">
                <body><![CDATA[    if (this._wdgtxConstructed) {
        return;
    }
    this._wdgtxConstructed = true;
    this._createUIElements();
    this._setListeners();]]></body>
            </method>

            <method name="ybwFinalize">
                <body><![CDATA[    if (!this._wdgtxConstructed) {
        return;
    }
    this._wdgtxConstructed = false;
    this._unsetListeners();
    this._destroyUIElements();
    this._closeAllWidgetNotifications();]]></body>
            </method>

            <method name="onNotificationAction">
                <parameter name="aPart"/>
                <parameter name="aAction"/>
                <parameter name="aData"/>
                <body><![CDATA[    switch (aPart) {
    case "flash-suggest":
        this.application.handleFlashSuggestAction(aAction, aData);
        break;
    case "social-wdgt-suggest":
        this.application.handleSocialSuggestAction(aAction, aData);
        break;
    case "turbo-suggest":
        this.application.handleTurboSuggestAction(aAction, aData);
        break;
    default:
        return;
    }]]></body>
            </method>

            <method name="sendStatistics">
                <parameter name="aPart"/>
                <parameter name="aAction"/>
                <body><![CDATA[    this.application.sendStatistics(aPart, aAction);]]></body>
            </method>

            <method name="_setListeners">
                <body><![CDATA[    window.messageManager.addMessageListener(this.EVENT_MESSAGE_NAME, this);
    this._windowListener.addListener("WindowLocationChange", this);]]></body>
            </method>

            <method name="_unsetListeners">
                <body><![CDATA[    window.messageManager.removeMessageListener(this.EVENT_MESSAGE_NAME, this);
    this._windowListener.removeListener("WindowLocationChange", this);]]></body>
            </method>

            <method name="_createUIElements">
                <body><![CDATA[    this._doContextMenu();]]></body>
            </method>

            <method name="_destroyUIElements">
                <body><![CDATA[    this._undoContextMenu();]]></body>
            </method>

            <method name="_doContextMenu">
                <body><![CDATA[    if (this.application.shouldContextMenuSuggest()) {
        this._buildMenuItems();
        this._contextMenuSuggestIsActive = true;
    }
    this._addContextMenuListeners();]]></body>
            </method>

            <method name="_undoContextMenu">
                <body><![CDATA[    this._removeContextMenuListeners();
    this._destroyMenuItems();]]></body>
            </method>

            <method name="_addContextMenuListeners">
                <body><![CDATA[    this._contextMenu.addEventListener("popupshowing", this);
    this._contextMenu.addEventListener("popuphiding", this);]]></body>
            </method>

            <method name="_removeContextMenuListeners">
                <body><![CDATA[    this._contextMenu.removeEventListener("popupshowing", this);
    this._contextMenu.removeEventListener("popuphiding", this);]]></body>
            </method>

            <method name="_buildMenuItems">
                <body><![CDATA[    if (this._menuItem) {
        return;
    }
    let menuitem = document.createElement("menuitem");
    menuitem.setAttribute("id", this.api.Environment.barPlatform.name + "-context-menu-browseroffers");
    menuitem.setAttribute("class", "menuitem-iconic menuitem-with-favicon");
    menuitem.setAttribute("image", this.common.resolvePath("content/icons/menu.png"));
    menuitem.setAttribute("label", this._browserofferOpenLinkLabel);
    menuitem.setAttribute("hidden", "true");
    menuitem.addEventListener("command", this);
    this._contextMenu.insertBefore(menuitem, document.getElementById("context-sep-open"));
    this._menuItem = menuitem;]]></body>
            </method>

            <method name="_destroyMenuItems">
                <body><![CDATA[    if (!this._menuItem) {
        return;
    }
    this._menuItem.removeEventListener("command", this);
    this._contextMenu.removeChild(this._menuItem);
    this._menuItem = null;]]></body>
            </method>

            <method name="_addWidgetOnToolbar">
                <parameter name="aWidgetId"/>
                <body><![CDATA[    let widgetPosition = this._findWidgetPositionOnToolbar();
    this.api.Controls.addWidget(aWidgetId, window, widgetPosition.relativeTo, widgetPosition.placeAfter);]]></body>
            </method>

            <method name="_findWidgetPositionOnToolbar">
                <body><![CDATA[    let appName = this.api.Environment.barPlatform.name;
    function isYandexWidget(aButton) {
        return aButton && aButton.getAttribute("cb-app") === appName;
    }
    let relativeTo = null;
    let placeAfter = true;
    let urlbarContainer = document.getElementById("urlbar-container");
    if (urlbarContainer) {
        relativeTo = urlbarContainer;
        let target = urlbarContainer.nextElementSibling;
        while (target) {
            if (isYandexWidget(target)) {
                relativeTo = target;
            }
            target = target.nextElementSibling;
        }
        let overflowButton = document.getElementById("nav-bar-overflow-button");
        if (overflowButton) {
            if (relativeTo !== urlbarContainer) {
                placeAfter = false;
            }
        }
    }
    return {
        relativeTo: relativeTo,
        placeAfter: placeAfter
    };]]></body>
            </method>

            <method name="_hasAvailableSpaceOnToolbar">
                <body><![CDATA[    let overflowButton = document.getElementById("nav-bar-overflow-button");
    if (!overflowButton) {
        return true;
    }
    let compStyle = this.ownerDocument.defaultView.getComputedStyle(overflowButton);
    if (compStyle.getPropertyValue("display") === "none") {
        return true;
    }
    let urlbarContainer = document.getElementById("urlbar-container");
    let nextElement = urlbarContainer;
    while (nextElement = nextElement.nextElementSibling) {
        if (nextElement && [
                "toolbaritem",
                "toolbarbutton"
            ].indexOf(nextElement.localName) > -1 && !nextElement.hidden) {
            return true;
        }
    }
    return false;]]></body>
            </method>

            <method name="_getNotification">
                <parameter name="aBrowser"/>
                <parameter name="aNotificationName"/>
                <body><![CDATA[    return gBrowser.getNotificationBox(aBrowser).getNotificationWithValue(aNotificationName);]]></body>
            </method>

            <method name="_createNotification">
                <parameter name="aBrowser"/>
                <parameter name="aNotificationName"/>
                <body><![CDATA[    let notificationBox = gBrowser.getNotificationBox(aBrowser);
    let notification = notificationBox.appendNotification("", aNotificationName, "", notificationBox.PRIORITY_WARNING_HIGH, []);
    notification.module = this;
    notification.setAttribute("anonid", aNotificationName);
    return notification;]]></body>
            </method>

            <method name="_obtainNotificationWithName">
                <parameter name="aNotificationName"/>
                <parameter name="aBrowser"/>
                <body><![CDATA[    aBrowser = aBrowser || gBrowser.mCurrentBrowser;
    let notification = this._getNotification(aBrowser, aNotificationName);
    if (notification) {
        return notification;
    }
    return this._createNotification(aBrowser, aNotificationName);]]></body>
            </method>

            <method name="_closeNotification">
                <parameter name="aBrowser"/>
                <parameter name="aNotificationName"/>
                <parameter name="onBeforeCloseCallback"/>
                <body><![CDATA[    let notification = this._getNotification(aBrowser, aNotificationName);
    if (!notification) {
        return;
    }
    if (typeof onBeforeCloseCallback === "function") {
        try {
            let result = onBeforeCloseCallback.call(this, notification);
            if (result === false) {
                return;
            }
        } catch (e) {
            this.application.log(e.message);
        }
    }
    notification.close();]]></body>
            </method>

            <method name="_closeAllNotificationsWithName">
                <parameter name="aNotificationName"/>
                <parameter name="onBeforeCloseCallback"/>
                <body><![CDATA[    gBrowser.browsers.forEach(function (aBrowser) {
        this._closeNotification(aBrowser, aNotificationName, onBeforeCloseCallback);
    }, this);]]></body>
            </method>

            <method name="_closeAllWidgetNotifications">
                <body><![CDATA[    [
        this.NOTIFICATION_FLASH_NAME,
        this.NOTIFICATION_SOCIAL_NAME,
        this.NOTIFICATION_TURBO_NAME
    ].forEach(aNotificationName => this._closeAllNotificationsWithName(aNotificationName));]]></body>
            </method>

            <method name="_showSocialSuggestIfNeeded">
                <parameter name="aBrowser"/>
                <body><![CDATA[    if (!this.application.shouldSocialPageWidgetSuggest()) {
        return;
    }
    let host = this.application.getURIBaseDomain(this._getBrowserDocumentURI(aBrowser));
    if (!host) {
        return;
    }
    let [
        widgetName,
        widgetID
    ] = this.application.findSocialWidgetForHost(host);
    if (!widgetName) {
        return;
    }
    if (!this._hasAvailableSpaceOnToolbar()) {
        return;
    }
    let notification = this._obtainNotificationWithName(this.NOTIFICATION_SOCIAL_NAME, aBrowser);
    ;
    notification.ybtype = widgetName;
    notification.ybwidgetID = widgetID;]]></body>
            </method>

            <method name="_showFlashSuggestIfNeeded">
                <parameter name="aBrowser"/>
                <body><![CDATA[    if (!this.application.shouldMakeFlashSuggest()) {
        return;
    }
    this._obtainNotificationWithName(this.NOTIFICATION_FLASH_NAME, aBrowser);]]></body>
            </method>

            <method name="_showTurboSuggestIfNeeded">
                <parameter name="aBrowser"/>
                <body><![CDATA[    if (!this.application.shouldMakeTurboSuggest()) {
        return;
    }
    let notification = this._obtainNotificationWithName(this.NOTIFICATION_TURBO_NAME, aBrowser);
    notification.ybdomain = this.application.getURIBaseDomain(aBrowser.currentURI);]]></body>
            </method>

            <method name="_getBrowserDocumentURI">
                <parameter name="aBrowser"/>
                <body><![CDATA[    return aBrowser.currentURI;]]></body>
            </method>

            <method name="_isContextMenuValidOS">
                <body><![CDATA[    return [
        "mac",
        "windows"
    ].indexOf(this.api.Environment.os.name) > -1;]]></body>
            </method>

            <method name="_isValidContextMenuSuggestURL">
                <parameter name="aURL"/>
                <body><![CDATA[    return /^(https?|ftp):/.test(aURL);]]></body>
            </method>

            <method name="_onWindowLocationChange">
                <parameter name="aData"/>
                <body><![CDATA[    this._showSocialSuggestIfNeeded(aData.tab);]]></body>
            </method>

            <method name="_onContextMenuPopupShowing">
                <body><![CDATA[    if (!gContextMenu.onLink) {
        return;
    }
    if (!this._isValidContextMenuSuggestURL(gContextMenu.linkURL)) {
        return;
    }
    if (this._isContextMenuValidOS()) {
        this.sendStatistics("context-menu", "showonlink");
    }
    if (!this._contextMenuSuggestIsActive) {
        return;
    }
    if (!this.application.shouldMakeContenxtMenuSuggest()) {
        return;
    }
    if (this._menuItem) {
        this._menuItem.hidden = false;
        this.sendStatistics("context-menu", "addbbrun");
    }]]></body>
            </method>

            <method name="_onContextMenuPopupHiding">
                <body><![CDATA[    if (gContextMenu) {
        return;
    }
    if (this._menuItem) {
        this._menuItem.hidden = true;
    }]]></body>
            </method>

            <method name="_onContextMenuSettingChange">
                <parameter name="aSettingValue"/>
                <body><![CDATA[    if (aSettingValue) {
        this._buildMenuItems();
    }
    this._contextMenuSuggestIsActive = aSettingValue;]]></body>
            </method>

            <method name="_onContextSuggestSettingChange">
                <parameter name="aSettingValue"/>
                <body><![CDATA[    if (!aSettingValue) {
        this._closeAllNotificationsWithName(this.NOTIFICATION_SOCIAL_NAME);
        return;
    }
    this._showSocialSuggestIfNeeded(gBrowser.mCurrentBrowser);]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="aEvent"/>
                <body><![CDATA[    let target = aEvent.originalTarget;
    switch (aEvent.type) {
    case "command":
        this.sendStatistics("context-menu", "run");
        this.api.Statistics.BarNavig.sendRequest({ addbb: "cmbb" });
        this.api.Integration.yandexBrowser.openBrowser(gContextMenu.linkURL);
        break;
    case "popupshowing":
        this._onContextMenuPopupShowing();
        break;
    case "popuphiding":
        this._onContextMenuPopupHiding();
        break;
    default:
        break;
    }]]></body>
            </method>

            <method name="observe">
                <parameter name="aSubject"/>
                <parameter name="aTopic"/>
                <parameter name="aData"/>
                <body><![CDATA[    switch (aTopic) {
    case "WindowLocationChange":
        this._onWindowLocationChange(aData);
        break;
    default:
        return;
    }]]></body>
            </method>

            <method name="receiveMessage">
                <parameter name="message"/>
                <body><![CDATA[    let {name, data, target, objects} = message;
    switch (data.type) {
    case "flash":
        this._showFlashSuggestIfNeeded(target);
        break;
    case "turbo":
        if (data.flag) {
            this._showTurboSuggestIfNeeded(target);
        } else {
            this._closeNotification(target, this.NOTIFICATION_TURBO_NAME);
        }
        break;
    default:
        return;
    }]]></body>
            </method>
        </implementation>
    </binding>
</bindings>
