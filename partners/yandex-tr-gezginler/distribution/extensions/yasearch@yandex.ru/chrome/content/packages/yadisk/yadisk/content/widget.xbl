<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE bindings SYSTEM "../entities.dtd"><bindings xmlns:html="http://www.w3.org/1999/xhtml" xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding extends="/-common/content/basewidget.xbl#widget-unique" id="toolbarbutton">
        <resources>
            <stylesheet src="styles/main.css"/>
        </resources>

        <content>
            <xul:toolbarbutton anonid="auth-button" class="toolbarbutton-1 widget-button" item-command="auth" label="&widget.name;" tooltiptext="&widget.button.unauthorized;" type="button" yb-native-not-authorized="true"/>

            <xul:toolbarbutton anonid="main-button" class="toolbarbutton-1 widget-button" item-command="openSlice" label="&widget.name;" tooltiptext="&widget.button.authorized;" type="button"/>
        </content>

        <implementation implements="nsIDOMEventListener, nsIObserver, nsIMessageListener">
            <field name="observers"><![CDATA[    ({
        display: function (topic, data) {
            this.updateView(data && parseInt(data, 10));
        },
        suggest: function (topic, data) {
            if (!data) {
                return;
            }
            let dataObj;
            try {
                dataObj = JSON.parse(data);
            } catch (e) {
                return;
            }
            if (dataObj.document) {
                this._showSaveDocumentButtonIfNeeded();
            }
            if (dataObj.popupButton === false) {
                this._hideBalloon();
            }
        },
        tutorial: function (topic, data) {
            if (!data) {
                this.application.hideHighlight(window);
                this.hideTutorial();
            } else {
                switch (data) {
                case this.TUTORIAL_TYPES.SAVE:
                    this.showTutorial(data);
                    break;
                default:
                    return;
                }
            }
        },
        "tutorial:start-download": function (topic, data) {
            this._generateClickEvent(this._balloon);
        },
        "tutorial:show-slice": function (topic, data) {
            this._generateClickEvent(this._button, "command");
        }
    });]]></field>

            <field name="EVENT_MESSAGE_NAME" readonly="true">'yasearch@yandex.ru:yadisk:event'</field>
            <field name="TUTORIAL_TYPES" readonly="true">this.application.TUTORIAL_TYPES</field>

            <field name="_STATES" readonly="true">({
                progress: 1,
                success: 2,
                error: 3
            })</field>

            <field name="_htmlTypes" readonly="true">([
                'text/html',
                'application/xhtml+xml'
            ])</field>

            <field name="_windowListenerEvents" readonly="true">([
                'PageLocationChange',
                'WindowLocationChange'
            ])</field>

            <field name="_contextMenu" readonly="true">document.getElementById('contentAreaContextMenu')</field>
            <field name="_content" readonly="true">gBrowser.mPanelContainer</field>
            <field name="_button" readonly="true">document.getAnonymousElementByAttribute(this, 'anonid', 'main-button')</field>

            <field name="_balloon">null</field>
            <field name="_saveDocumentButton">null</field>
            <field name="_menuItem">null</field>
            <field name="_urlbarButton">null</field>
            <field name="_popups">null</field>
            <field name="_saveImageTutorialShowing">false</field>

            <field name="windowListener" readonly="true">this.application.api.Browser.getWindowListener(window)</field>

            <constructor><![CDATA[    this.wdgtxConstructor();]]></constructor>

            <destructor><![CDATA[    this.wdgtxDestructor();]]></destructor>

            <method name="wdgtxConstructor">
                <body><![CDATA[    if (this._wdgtxConstructed) {
        return;
    }
    this._wdgtxConstructed = true;
    this._createUIElements();
    this._setListeners();
    this.updateView();
    this._showSaveDocumentButtonIfNeeded();]]></body>
            </method>

            <method name="wdgtxDestructor">
                <body><![CDATA[    if (!this._wdgtxConstructed) {
        return;
    }
    this._wdgtxConstructed = false;
    this._unsetListeners();
    this._destroyUIElements();]]></body>
            </method>

            <method name="updateView">
                <parameter name="aState"/>
                <body>
                    // TODO: При рефакторинге помнить, что одинарные кавычки внутри локализации сломают код.
                    let progressLabel = "&widget.button.uploading;";
                    let errorLabel = "&widget.button.upload-error;";
                    let successLabel = "&widget.button.upload-complete;";
                    let defaultLabel = "&widget.button.authorized;";

                <![CDATA[    if (!this.application.isAuth()) {
        this.setAttribute("auth", false);
        return;
    } else {
        this.setAttribute("auth", true);
    }
    let tooltipTexts = {};
    if (aState) {
        tooltipTexts[this._STATES.progress] = progressLabel;
        tooltipTexts[this._STATES.error] = errorLabel;
        tooltipTexts[this._STATES.success] = successLabel;
    }
    if (!(aState && this.application.isSliceOpen())) {
        let image = "ico";
        let tooltipText;
        Object.keys(this._STATES).some(function (state) {
            if (aState === this._STATES[state]) {
                image = state;
                tooltipText = tooltipTexts[aState];
                return true;
            }
            return false;
        }, this);
        this._button.setAttribute("image", this.common.resolvePath("content/icons/" + image + ".svg"));
        this._button.setAttribute("tooltiptext", tooltipText || defaultLabel);
    }]]></body>
            </method>

            <method name="downloadMedia">
                <parameter name="aURL"/>
                <parameter name="aMeta"/>
                <body><![CDATA[    if (!aURL) {
        return false;
    }
    let metaInfo = aMeta || {};
    let currentBrowser = gBrowser.mCurrentBrowser;
    if (typeof metaInfo.pageTitle === "undefined") {
        metaInfo.pageTitle = this._getBrowserDocumentTitle(currentBrowser);
    }
    if (typeof metaInfo.pageURL === "undefined") {
        let pageURL;
        let contentType = this._getBrowserDocumentContentType(currentBrowser);
        if (!contentType || this._htmlTypes.indexOf(contentType.toLowerCase()) > -1) {
            pageURL = currentBrowser.currentURI.spec;
        } else {
            let referrer = this._getBrowserDocumentReferrer(currentBrowser);
            pageURL = referrer && referrer.spec;
        }
        metaInfo.pageURL = pageURL;
    }
    this.application.tryDownloadMedia(aURL, metaInfo);]]></body>
            </method>

            <method name="saveDocument">
                <body><![CDATA[    let browser = gBrowser.mCurrentBrowser;
    let referrer = this._getBrowserDocumentReferrer(browser);
    let metaInfo = { pageURL: referrer && referrer.spec };
    this.downloadMedia(browser.currentURI.spec, metaInfo);]]></body>
            </method>

            <method name="showTutorial">
                <parameter name="aType"/>
                <body><![CDATA[    if (!this.application.shouldTutorialShow(aType) || this._saveImageTutorialShowing) {
        return;
    }
    let tutorialInfo = this._createTutorialData(aType);
    if (!tutorialInfo) {
        return false;
    }
    let target = this._getTutorialTarget(aType);
    if (!target) {
        return false;
    }
    if (aType === this.TUTORIAL_TYPES.SAVE) {
        this.application.showHighlight(window, target, "wooble");
    }
    this.application.showInfo(window, target, tutorialInfo);
    if (aType === this.TUTORIAL_TYPES.SHOW_IMAGE_BUTTON) {
        this.sendButtonStatistics(this.application.packageVersion + ".pass.instruction.show");
    } else if (aType === this.TUTORIAL_TYPES.SAVE) {
        this.sendButtonStatistics(this.application.packageVersion + ".pass.instructionslice.show");
    }]]></body>
            </method>

            <method name="hideTutorial">
                <body><![CDATA[    this.application.hideInfo(window);]]></body>
            </method>

            <method name="sendButtonStatistics">
                <parameter name="aMessage"/>
                <body><![CDATA[    this.xbStatLog(aMessage);]]></body>
            </method>

            <method name="_setListeners">
                <body><![CDATA[    window.messageManager.addMessageListener(this.EVENT_MESSAGE_NAME, this);
    this._windowListenerEvents.forEach(aEventName => this.windowListener.addListener(aEventName, this));]]></body>
            </method>

            <method name="_unsetListeners">
                <body><![CDATA[    window.messageManager.removeMessageListener(this.EVENT_MESSAGE_NAME, this);
    this._windowListenerEvents.forEach(aEventName => this.windowListener.removeListener(aEventName, this));]]></body>
            </method>

            <method name="_createUIElements">
                <body><![CDATA[    this._doContextMenu();
    this._saveDocumentButton = this._createSaveDocumentButton();
    this._balloon = this._createBalloon();]]></body>
            </method>

            <method name="_destroyUIElements">
                <body><![CDATA[    this._undoContextMenu();
    this._destroySaveDocumentButton();
    this._destroyBalloon();]]></body>
            </method>

            <method name="_doContextMenu">
                <body><![CDATA[    this._buildMenuItems();
    this._contextMenu.addEventListener("popupshowing", this);
    this._contextMenu.addEventListener("popuphiding", this);]]></body>
            </method>

            <method name="_undoContextMenu">
                <body><![CDATA[    this._contextMenu.removeEventListener("popupshowing", this);
    this._contextMenu.removeEventListener("popuphiding", this);
    this._destroyMenuItems();]]></body>
            </method>

            <method name="_buildMenuItems">
                <body>
                    let label = "&context-menu.upload-title;";

                <![CDATA[    if (this._menuItem) {
        return;
    }
    let menuitem = document.createElement("menuitem");
    menuitem.setAttribute("id", this.application.api.Environment.barPlatform.name + "-context-menu-yadisk");
    menuitem.setAttribute("class", "menuitem-iconic menuitem-with-favicon");
    menuitem.setAttribute("image", this.common.resolvePath("content/icons/menu.png"));
    menuitem.setAttribute("label", label);
    menuitem.setAttribute("hidden", "true");
    menuitem.addEventListener("command", this);
    this._contextMenu.insertBefore(menuitem, this._contextMenu.querySelector("#context-viewimageinfo").nextElementSibling);
    this._menuItem = menuitem;]]></body>
            </method>

            <method name="_destroyMenuItems">
                <body><![CDATA[    if (!this._menuItem) {
        return;
    }
    this._menuItem.removeEventListener("command", this);
    this._contextMenu.removeChild(this._menuItem);
    this._menuItem = null;]]></body>
            </method>

            <method name="_createSaveDocumentButton">
                <body><![CDATA[    let button = this._createElement("panel");
    button.style.MozBinding = "url('" + this.common.resolvePath("content/widget.xbl#save-document-button") + "')";
    button.setAttribute("noautohide", true);
    button.controller = this;
    document.getElementById("mainPopupSet").appendChild(button);
    return button;]]></body>
            </method>

            <method name="_destroySaveDocumentButton">
                <body><![CDATA[    if (!this._saveDocumentButton) {
        return;
    }
    if (typeof this._saveDocumentButton.hide === "function") {
        this._saveDocumentButton.hide();
    }
    this._saveDocumentButton.parentNode.removeChild(this._saveDocumentButton);
    this._saveDocumentButton = null;]]></body>
            </method>

            <method name="_createBalloon">
                <body><![CDATA[    let button = this._createElement("panel");
    button.style.MozBinding = "url('" + this.common.resolvePath("content/widget.xbl#balloon") + "')";
    button.setAttribute("noautohide", true);
    button.setAttribute("noautofocus", true);
    button.controller = this;
    document.getElementById("mainPopupSet").appendChild(button);
    return button;]]></body>
            </method>

            <method name="_destroyBalloon">
                <body><![CDATA[    if (!this._balloon) {
        return;
    }
    this._hideBalloon();
    this._balloon.parentNode.removeChild(this._balloon);
    this._balloon = null;]]></body>
            </method>

            <method name="_createElement">
                <parameter name="aElementName"/>
                <body><![CDATA[    return document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", aElementName);]]></body>
            </method>

            <method name="_showBalloon">
                <parameter name="aData"/>
                <body><![CDATA[    if (this._balloon) {
        let balloonPosition = aData.position;
        let notificationBox = gBrowser.getNotificationBox(gBrowser.mCurrentBrowser);
        if (notificationBox.currentNotification) {
            balloonPosition.y += notificationBox.currentNotification.boxObject.height;
        }
        balloonPosition.x += gBrowser.mCurrentBrowser.boxObject.x - gBrowser.boxObject.x;
        if (typeof this._balloon.show === "function") {
            this._balloon.show(balloonPosition, aData.mediaInfo);
            return true;
        }
    }
    return false;]]></body>
            </method>

            <method name="_createTutorialData">
                <parameter name="aType"/>
                <body>
                    let headerText = '&widget.save.tutorial.header;';

                    let saveImageDescriptionText = '&widget.save-button.tutorial.text;';
                    let savedDescriptionText = '&widget.save.tutorial.text;';

                    let confirmButtonText = '&widget.save-button.tutorial.confirmButton.short;';
                    let moreInfoButtonText = '&widget.save-button.tutorial.moreInfo;';
                    let settingsButtonText = '&widget.save-button.tutorial.settings;';

                    <![CDATA[    let data = {};
    let callbackIDPrefix = this.application.api.Environment.barPlatform.name + "-yadisk-tutorial";
    data.title = headerText;
    data.icon = this.common.resolvePath("content/icons/ico.svg");
    let callbackIDRoot = "";
    switch (aType) {
    case this.TUTORIAL_TYPES.SHOW_IMAGE_BUTTON:
        callbackIDRoot = ":show-button-callback";
        data.text = saveImageDescriptionText;
        break;
    case this.TUTORIAL_TYPES.SAVE:
        callbackIDRoot = ":save-button-callback";
        data.text = savedDescriptionText;
        break;
        return null;
    }
    data.buttons = [
        {
            label: confirmButtonText,
            style: "primary",
            callbackID: callbackIDPrefix + callbackIDRoot + ":confirm"
        },
        {
            label: moreInfoButtonText,
            style: "link",
            callbackID: callbackIDPrefix + callbackIDRoot + ":more-info"
        },
        {
            label: settingsButtonText,
            style: "link",
            callbackID: callbackIDPrefix + callbackIDRoot + ":settings"
        }
    ];
    data.options = {
        closeButtonCallbackID: callbackIDPrefix + callbackIDRoot + ":close",
        targetCallbackID: callbackIDPrefix + callbackIDRoot + ":target"
    };
    return data;]]></body>
            </method>

            <method name="_getTutorialTarget">
                <parameter name="aType"/>
                <body><![CDATA[    let data = {};
    switch (aType) {
    case this.TUTORIAL_TYPES.SHOW_IMAGE_BUTTON:
        data.node = this._balloon;
        data.targetName = this.application.api.Environment.barPlatform.name + "-save-image-button";
        data.infoPanelPosition = "rightcenter topleft";
        data.infoPanelOffsetX = 5;
        data.addTargetListener = function (aDocument, aCallback) {
            this._saveImageTutorialShowing = true;
            this._balloon.addEventListener("popuphiding", aCallback);
            this._balloon.addEventListener("click", aCallback);
        }.bind(this);
        data.removeTargetListener = function (aDocument, aCallback) {
            this._saveImageTutorialShowing = false;
            this._balloon.removeEventListener("popuphiding", aCallback);
            this._balloon.removeEventListener("click", aCallback);
        }.bind(this);
        break;
    case this.TUTORIAL_TYPES.SAVE:
        data.node = this._button;
        data.targetName = this.application.api.Environment.barPlatform.name + "-widget-button";
        data.infoPanelPosition = "bottomcenter topleft";
        data.addTargetListener = function (aDocument, aCallback) {
            this._button.addEventListener("click", aCallback);
        }.bind(this);
        data.removeTargetListener = function (aDocument, aCallback) {
            this.application.hideHighlight(window);
            this._button.removeEventListener("click", aCallback);
        }.bind(this);
        break;
    default:
        return null;
    }
    return data;]]></body>
            </method>

            <method name="_hideBalloon">
                <body><![CDATA[    if (this._balloon && typeof this._balloon.hide === "function") {
        this._balloon.hide();
        return true;
    }
    return false;]]></body>
            </method>

            <method name="_showSaveDocumentButton">
                <body><![CDATA[    if (this._saveDocumentButton && typeof this._saveDocumentButton.show === "function") {
        this._saveDocumentButton.show();
        return true;
    }
    return false;]]></body>
            </method>

            <method name="_hideSaveDocumentButton">
                <body><![CDATA[    if (this._saveDocumentButton && typeof this._saveDocumentButton.hide === "function") {
        this._saveDocumentButton.hide();
        return true;
    }
    return false;]]></body>
            </method>

            <method name="_calculateBalloonScreenPosition">
                <parameter name="aPositionInDocument"/>
                <body><![CDATA[    let currentBrowserBO = gBrowser.mCurrentBrowser.boxObject;
    return {
        x: window.mozInnerScreenX + aPositionInDocument.x,
        y: currentBrowserBO.screenY + aPositionInDocument.y
    };]]></body>
            </method>

            <method name="_generateClickEvent">
                <parameter name="aElement"/>
                <parameter name="aType"/>
                <body><![CDATA[    if (!aElement) {
        return;
    }
    var event = new MouseEvent(aType || "click", {
        "view": window,
        "bubbles": true,
        "cancelable": true
    });
    aElement.dispatchEvent(event);]]></body>
            </method>

            <method name="_getSaveImageStatsticsURL">
                <parameter name="aURL"/>
                <body><![CDATA[    if (this.application.dataImageRegexp.test(aURL)) {
        aURL = aURL.substr(0, 256);
    }
    return aURL;]]></body>
            </method>

            <method name="_showSaveDocumentButtonIfNeeded">
                <parameter name="aBrowser"/>
                <body><![CDATA[    let browser = aBrowser || gBrowser.mCurrentBrowser;
    let currentURL = browser.currentURI.spec;
    let tabData = this.windowListener.getTabData(browser, "yadisk");
    let showSuggest = function showSuggest() {
        if (!this.application.shouldDocumentSuggest()) {
            return false;
        }
        if (this._isInternalURL(browser.currentURI) || this._isYandexDiskURL(currentURL)) {
            return false;
        }
        if (!this._hasBrowserSuitableContent(browser)) {
            return false;
        }
        return true;
    }.bind(this)();
    if (showSuggest) {
        if (!this._showSaveDocumentButton()) {
            return;
        }
        if (tabData.showedURL !== currentURL) {
            this.sendButtonStatistics("pass.viewpanelshow");
        }
        tabData.showedURL = currentURL;
    } else {
        this._hideSaveDocumentButton();
        tabData.showedURL = null;
    }]]></body>
            </method>

            <method name="_getBrowserTabData">
                <parameter name="aBrowser"/>
                <body><![CDATA[    return this.windowListener.getTabData(aBrowser, "yadisk");]]></body>
            </method>

            <method name="_getBrowserDocumentContentType">
                <parameter name="aBrowser"/>
                <body><![CDATA[    let contentType = aBrowser.documentContentType;
    if (!contentType && aBrowser.contentDocument) {
        contentType = aBrowser.contentDocument.contentType;
    }
    return contentType;]]></body>
            </method>

            <method name="_getBrowserDocumentTitle">
                <parameter name="aBrowser"/>
                <body><![CDATA[    return aBrowser.contentTitle;]]></body>
            </method>

            <method name="_getBrowserDocumentReferrer">
                <parameter name="aBrowser"/>
                <body><![CDATA[    return aBrowser.webNavigation && aBrowser.webNavigation.referringURI;]]></body>
            </method>

            <method name="_isInternalURL">
                <parameter name="aURL"/>
                <body><![CDATA[    return /^(chrome|about|yafd|bar)$/i.test(aURL.scheme);]]></body>
            </method>

            <method name="_isImageURL">
                <parameter name="aURL"/>
                <body><![CDATA[    return /^(https?|file):\/\//i.test(aURL) || this.application.dataImageRegexp.test(aURL);]]></body>
            </method>

            <method name="_isYandexDiskURL">
                <parameter name="aURL"/>
                <body><![CDATA[    return /^https?:\/\/(yadi\.sk|([^/]*\.)?disk\.yandex\.[^/]+|[^/]+\.storage\.yandex\.net\/rdisk)\//i.test(aURL);]]></body>
            </method>

            <method name="_areSaveImageButtonConditions">
                <parameter name="aButtonPosition"/>
                <body><![CDATA[    if (!document.hasFocus() || this._saveDocumentButton.isOpen()) {
        return false;
    }
    if (!this._popups) {
        this._popups = document.getElementById("mainPopupSet").children;
    }
    let buttonPos = this._calculateBalloonScreenPosition(aButtonPosition);
    let isOpen = Array.prototype.some.call(this._popups, aPopup => {
        if ([
                "open",
                "showing"
            ].indexOf(aPopup.state) > -1) {
            let popupBO = aPopup.boxObject;
            if (!popupBO) {
                return false;
            }
            let popupRight = popupBO.screenX + popupBO.width;
            let popupBottom = popupBO.screenY + popupBO.height;
            let buttonWidthHalf = 14;
            let buttonCenterX = buttonPos.x + buttonWidthHalf;
            let buttonCenterY = buttonPos.y + buttonWidthHalf;
            if (popupBO.screenX < buttonCenterX && popupRight > buttonCenterX && popupBO.screenY < buttonCenterY && popupBottom > buttonCenterY) {
                return true;
            }
        }
        return false;
    });
    return !isOpen;]]></body>
            </method>

            <method name="_hasBrowserSuitableContent">
                <parameter name="aBrowser"/>
                <body><![CDATA[    let contentType = this._getBrowserDocumentContentType(aBrowser);
    if (!contentType) {
        return;
    }
    contentType = contentType.toLowerCase();
    if (this._htmlTypes.indexOf(contentType) > -1) {
        return false;
    }
    return true;]]></body>
            </method>

            <method name="_onContextMenuPopupShowing">
                <body><![CDATA[    if (!this.application.shouldContextMenuSuggest()) {
        return;
    }
    let mediaURL = null;
    if (!gContextMenu.isContentSelected) {
        if (gContextMenu.onImage && gContextMenu.mediaURL) {
            mediaURL = gContextMenu.mediaURL;
        } else if (gContextMenu.bgImageURL) {
            let shouldShow = !(gContextMenu.onImage || gContextMenu.onCanvas || gContextMenu.onVideo || gContextMenu.onAudio || gContextMenu.onLink || gContextMenu.onTextInput);
            if (shouldShow) {
                mediaURL = gContextMenu.bgImageURL;
            }
        }
    }
    if (!this._isImageURL(mediaURL)) {
        mediaURL = null;
    }
    if (mediaURL) {
        this._menuItem.hidden = false;
        this._menuItem.setAttribute("yb-targetURL", true);
    } else {
        this._menuItem.hidden = true;
        this._menuItem.removeAttribute("yb-targetURL");
    }]]></body>
            </method>

            <method name="_onContextSuggestCommand">
                <body><![CDATA[    if (!gContextMenu) {
        return;
    }
    let metaInfo = {};
    let mediaURL;
    if (gContextMenu.onImage && gContextMenu.mediaURL) {
        mediaURL = gContextMenu.mediaURL;
        metaInfo.imageAlt = gContextMenu.target && gContextMenu.target.getAttribute("alt");
    } else if (gContextMenu.bgImageURL) {
        mediaURL = gContextMenu.bgImageURL;
    }
    if (!mediaURL) {
        return;
    }
    this.xbStatLog("act.imgbuttoncmenu");
    this.downloadMedia(mediaURL, metaInfo);]]></body>
            </method>

            <method name="_onWindowLocationChange">
                <parameter name="aData"/>
                <body><![CDATA[    this._hideBalloon();
    this._showSaveDocumentButtonIfNeeded(aData.tab);]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="aEvent"/>
                <body><![CDATA[    let target = aEvent.originalTarget;
    switch (aEvent.type) {
    case "popupshowing":
        this._onContextMenuPopupShowing();
        break;
    case "command":
        if (target === this._menuItem) {
            this._onContextSuggestCommand();
        }
        break;
    default:
        return;
    }]]></body>
            </method>

            <method name="observe">
                <parameter name="aSubject"/>
                <parameter name="aTopic"/>
                <parameter name="aData"/>
                <body><![CDATA[    switch (aTopic) {
    case "WindowLocationChange":
        this._onWindowLocationChange(aData);
        break;
    default:
        return;
    }]]></body>
            </method>

            <method name="receiveMessage">
                <parameter name="message"/>
                <body><![CDATA[    let {name, data, target, objects} = message;
    switch (data.type) {
    case "showPopupButton":
        if (this._areSaveImageButtonConditions(data.position)) {
            this._showBalloon(data);
        }
        break;
    case "hidePopupButton":
        if (!this._balloon || this._balloon.mouseOver) {
            return;
        }
        this._hideBalloon();
        break;
    default:
        return;
    }]]></body>
            </method>
        </implementation>
    </binding>

    <binding extends="chrome://global/content/bindings/popup.xml#panel" id="buttonbase">
        <implementation>
            <method name="isOpen">
                <body><![CDATA[    return [
        "open",
        "showing"
    ].indexOf(this.state || "") > -1;]]></body>
            </method>

            <method name="hide">
                <body><![CDATA[    this.hidePopup();]]></body>
            </method>

            <method name="_isActivated">
                <body><![CDATA[    return this.classList.contains("activated");]]></body>
            </method>

            <method name="_changeActiveStatus">
                <parameter name="aActivate"/>
                <body><![CDATA[    let className = "activated";
    if (aActivate) {
        this.classList.add(className);
    } else {
        this.classList.remove(className);
    }]]></body>
            </method>
        </implementation>
    </binding>

    <binding extends="#buttonbase" id="balloon">
        <resources>
            <stylesheet src="styles/balloon.css"/>
        </resources>

        <content>
            <xul:hbox align="center" anonid="container" pack="center">
                <xul:image anonid="button" tooltiptext="&widget.save-button.title;"/>
            </xul:hbox>
        </content>

        <implementation>
            <method name="show">
                <parameter name="aPosition"/>
                <parameter name="aMediaInfo"/>
                <body><![CDATA[    this._mediaInfo = aMediaInfo;
    if (this.isOpen()) {
        this.hide();
    }
    this._changeActiveStatus(false);
    this.openPopup(gBrowser, "topleft topleft", aPosition.x, aPosition.y);]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="click"><![CDATA[    let target = event.originalTarget;
    let mButton = event.button;
    if (!(mButton === 0 || mButton === 1)) {
        return;
    }
    if (this._isActivated()) {
        return;
    }
    this._changeActiveStatus(true);
    this.controller.downloadMedia(this._mediaInfo.url, this._mediaInfo.meta);
    this.controller.sendButtonStatistics("act.imgbuttonclick");]]></handler>

            <handler event="mouseenter"><![CDATA[    if (this._isActivated()) {
        return;
    }
    let target = event.originalTarget;
    if (target !== event.currentTarget) {
        return;
    }
    this.controller.showTutorial(this.controller.TUTORIAL_TYPES.SHOW_IMAGE_BUTTON);]]></handler>
        </handlers>
    </binding>

    <binding extends="#buttonbase" id="save-document-button">
        <resources>
            <stylesheet src="styles/urlbarButton.css"/>
        </resources>

        <content>
            <hbox anonid="container" tooltiptext="&widget.pagebutton.tooltip;" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
                <hbox align="center" anonid="image-container" pack="center">
                    <image anonid="yadisk-image"/>
                </hbox>
                <label anonid="save">&widget.menu.save;</label>
            </hbox>
        </content>

        <implementation>
            <field name="_mouseMoveTimer">null</field>
            <field name="_collapsableTimer">null</field>
            <field name="_collapsable">false</field>

            <method name="show">
                <body><![CDATA[    if (this.isOpen()) {
        this.hide();
    }
    this._changeActiveStatus(false);
    this.openPopup(gBrowser, "topright topright", -40, 80);]]></body>
            </method>

            <method name="_handleMouseMove">
                <parameter name="aScreenX"/>
                <parameter name="aScreenY"/>
                <body><![CDATA[    if (!this._collapsable) {
        return;
    }
    let bo = this.boxObject;
    let buttonShowAreaLeft = bo.screenX - 200 - (this._width || 0);
    let buttonShowAreaBottom = bo.screenY + 200 + (bo.height || this._height || 0);
    if (aScreenX < buttonShowAreaLeft || aScreenY > buttonShowAreaBottom) {
        if (!this.collapsed) {
            this._width = bo.width;
            this._height = bo.height;
            this.collapsed = true;
        }
    } else {
        if (this.collapsed) {
            this.collapsed = false;
            this._width = this._height = null;
        }
    }]]></body>
            </method>

            <method name="_handleCollapseableTimeout">
                <body><![CDATA[    this._collapsable = true;]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="aEvent"/>
                <body><![CDATA[    switch (aEvent.type) {
    case "mousemove":
        clearTimeout(this._mouseMoveTimer);
        this._mouseMoveTimer = setTimeout(this._handleMouseMove.bind(this, aEvent.screenX, aEvent.screenY), 100);
        break;
    default:
        return;
    }]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="click"><![CDATA[    let target = event.originalTarget;
    let mButton = event.button;
    if (!(mButton === 0 || mButton === 1)) {
        return;
    }
    if (this._isActivated()) {
        return;
    }
    this._changeActiveStatus(true);
    this.controller.saveDocument();
    this.controller.sendButtonStatistics("act.viewpanelclick");]]></handler>

            <handler event="popupshowing"><![CDATA[    gBrowser.addEventListener("mousemove", this);
    this._collapsable = false;
    this._collapsableTimer = setTimeout(this._handleCollapseableTimeout.bind(this), 5000);]]></handler>

            <handler event="popuphiding"><![CDATA[    gBrowser.removeEventListener("mousemove", this);
    clearTimeout(this._mouseMoveTimer);
    clearTimeout(this._collapsableTimer);
    this.collapsed = false;
    this._width = this._height = null;]]></handler>
        </handlers>
    </binding>
</bindings>
