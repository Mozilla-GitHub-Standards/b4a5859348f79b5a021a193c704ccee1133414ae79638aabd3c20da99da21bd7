<?xml version='1.0'?>
<!DOCTYPE bindings SYSTEM "chrome://yasearch/locale/chevron-welcome/welcome.dtd"><bindings xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding extends="chrome://browser/content/customizableui/toolbar.xml#toolbar" id="toolbar" inheritstyle="false">
        <implementation implements="nsIDOMEventListener">
            <field name="_appName">this.getAttribute("cb-app")</field>
            <field name="_barCore">
                Components.classes["@yandex.ru/custombarcore;" + this._appName].getService().wrappedJSObject
            </field>
            <field name="_barApp">this._barCore.application</field>
            <field name="_logger">this._barApp.getLogger("Toolbar")</field>

            <field name="_wndCtrl">window[this._appName + "OverlayController"]</field>

            <constructor><![CDATA[    let constructorEx = this._constructorEx.bind(this);
    function constructorExTimed() {
        window.setTimeout(constructorEx, 0);
    }
    if (document.readyState == "complete") {
        constructorExTimed();
    } else {
        document.addEventListener("readystatechange", function readystatechangeHandler(event) {
            if (document.readyState == "complete") {
                document.removeEventListener("readystatechange", readystatechangeHandler, false);
                constructorExTimed();
            }
        }, false);
    }]]></constructor>

            <method name="_constructorEx">
                <body><![CDATA[    if (this.parentNode) {
        this.parentNode.addEventListener("beforecustomization", this, false);
        this.parentNode.addEventListener("aftercustomization", this, false);
        this.parentNode.addEventListener(this._appName + "-beforecustomization", this, false);
        this.parentNode.addEventListener(this._appName + "-aftercustomization", this, false);
    }]]></body>
            </method>

            <destructor><![CDATA[    if (this.parentNode) {
        this.parentNode.removeEventListener("beforecustomization", this, false);
        this.parentNode.removeEventListener("aftercustomization", this, false);
        this.parentNode.removeEventListener(this._appName + "-beforecustomization", this, false);
        this.parentNode.removeEventListener(this._appName + "-aftercustomization", this, false);
    }]]></destructor>

            <method name="_getComputedElementHeight">
                <parameter name="aElement"/>
                <body><![CDATA[    return parseInt(window.getComputedStyle(aElement, null).getPropertyValue("height"), 10);]]></body>
            </method>

            <method name="toggleCollapsed">
                <parameter name="forceCollapseState"/>
                <body><![CDATA[    let collapsedState = forceCollapseState !== undefined ? forceCollapseState : this.getAttribute("data-collapsed") !== "true";
    this.setAttribute("data-collapsed", collapsedState);
    this._wndCtrl.getAlienToolbars().forEach(function (toolbar) {
        if (!collapsedState && !toolbar.hasChildNodes()) {
            return;
        }
        toolbar.collapsed = collapsedState;
        document.persist(toolbar.id, "collapsed");
    });
    this.collapsed = this.hasChildNodes() ? collapsedState : true;
    document.persist(this.id, "collapsed");]]></body>
            </method>

            <method name="showWelcomeSlice">
                <body><![CDATA[    if (this._shouldShowChevronTutorial()) {
        this._showChevronTutorial();
    }]]></body>
            </method>

            <method name="_shouldShowChevronTutorial">
                <body><![CDATA[    let alienToolbars = this._wndCtrl.getAlienToolbars();
    if (!(alienToolbars.length > 0 || this.hasChildNodes())) {
        return false;
    }
    return true;]]></body>
            </method>

            <method name="_showChevronTutorial">
                <body><![CDATA[    let tutorialData = this._createChevronTutorialData();
    let target = this._createChevronTutorialTarget();
    setTimeout(function () {
        this.focusOnTabWithToolbar();
        this._barApp.tutorial.showHighlight(window, target, "wobble");
        this._barApp.tutorial.showInfo(window, target, tutorialData);
    }.bind(this), 300);]]></body>
            </method>

            <method name="_createChevronTutorialData">
                <body>
                    let text = '&welcome.newfeature; &welcome.howitworks;';
                    let confirmButtonText = '&welcome.tutorial.confirm-button.short;';
                    let openPanelsText = '&welcome.openpanels;';
                    let closePanelsText = '&welcome.closeallpanels;';
                <![CDATA[    let allToolbarsCollapsed = this._areAllToolbarsCollapsed();
    let data = Object.create(null);
    let callbackPrefix = this._appName + "-chevron-tutorial:";
    data.text = text.replace("{button}", "");
    data.icon = "chrome://" + this._appName + "/skin/dialogs/chevron-welcome/" + (allToolbarsCollapsed ? "chevron-collapsed.png" : "chevron.png");
    data.buttons = [
        {
            label: confirmButtonText,
            style: "primary",
            callback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "confirm")
        },
        {
            label: allToolbarsCollapsed ? openPanelsText : closePanelsText,
            callback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "use-feature", allToolbarsCollapsed)
        }
    ];
    data.options = {
        closeButtonCallback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "close"),
        targetCallback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "target")
    };
    return data;]]></body>
            </method>

            <method name="_areAllToolbarsCollapsed">
                <body><![CDATA[    if (this.collapsed) {
        let alienToolbars = this._wndCtrl.getAlienToolbars();
        for (let i = 0; i < alienToolbars.length; i++) {
            if (!alienToolbars[i].collapsed) {
                return false;
            }
        }
        return true;
    }
    return false;]]></body>
            </method>

            <method name="_chevronTutorialResponseHandler">
                <parameter name="callbackID"/>
                <parameter name="allToolbarsCollapsed"/>
                <body><![CDATA[    this._barApp.tutorial.hideHighlight(window);
    let chevronButton = window.document.getElementById(this._appName + "-toggle-barless-button");
    let [
        prefix,
        action
    ] = (callbackID || "").split(":");
    if (action === "use-feature") {
        if (chevronButton) {
            chevronButton.collapseToolbars(!allToolbarsCollapsed);
        }
    } else if (action === "target") {
        this._barApp.tutorial.hideInfo(window);
    }
    chevronButton.setNoMoreTutorialState();]]></body>
            </method>

            <method name="_createChevronTutorialTarget">
                <body><![CDATA[    let data = Object.create(null);
    let chevronButton = data.node = document.getElementById(this._appName + "-toggle-barless-toolbaritem");
    data.targetName = this._appName + "-toggle-barless-toolbaritem";
    data.infoPanelPosition = "bottomcenter topright";
    data.addTargetListener = function (document, callback) {
        chevronButton.addEventListener("click", callback);
    };
    data.removeTargetListener = function (document, callback) {
        chevronButton.removeEventListener("click", callback);
    };
    return data;]]></body>
            </method>

            <method name="focusOnTabWithToolbar">
                <body><![CDATA[    let isHideChromeForLocation = function isHideChromeForLocation(spec) {
        if (XULBrowserWindow && typeof XULBrowserWindow.hideChromeForLocation == "function") {
            return XULBrowserWindow.hideChromeForLocation(spec);
        }
        Components.utils.reportError("Can not find XULBrowserWindow.hideChromeForLocation.");
        return false;
    };
    if (isHideChromeForLocation(gBrowser.currentURI.spec)) {
        let browserWithChrome = null;
        let browsers = gBrowser.browsers;
        for (let i = 0, len = browsers.length; i < len; i++) {
            if (!isHideChromeForLocation(browsers[i].currentURI.spec)) {
                browserWithChrome = gBrowser.tabContainer.childNodes[i];
                break;
            }
        }
        if (browserWithChrome) {
            gBrowser.selectedTab = browserWithChrome;
        } else {
            window.BrowserOpenTab();
        }
    }]]></body>
            </method>

            <method name="setForceHideAttribute">
                <body><![CDATA[    let forceHideAfterCustomize = this.collapsed && this.hasChildNodes();
    this.setAttribute("data-forceHide", forceHideAfterCustomize);]]></body>
            </method>

            <method name="onToolbarCustomize">
                <parameter name="aEnabled"/>
                <parameter name="aNativeEvent"/>
                <body><![CDATA[    if (aEnabled) {
        this.focusOnTabWithToolbar();
        if (aNativeEvent) {
            this.setForceHideAttribute();
        }
    } else {
        if (!this.collapsed && !this.hasChildNodes()) {
            this.collapsed = true;
            document.persist(this.id, "collapsed");
        } else {
            let forceHide = this.getAttribute("data-forceHide") === "true";
            if (!forceHide && this.hasChildNodes()) {
                this.collapsed = false;
                document.persist(this.id, "collapsed");
            } else if (forceHide) {
                this.collapsed = true;
                document.persist(this.id, "collapsed");
            }
        }
        const CHEVRON_STATE_PREF = "chevronState";
        let chevronCurrentState = this._barApp.preferences.get(CHEVRON_STATE_PREF, 0);
        let isChevronButtonVisible = this.hasChildNodes() || this._wndCtrl.getAlienToolbars().length > 0;
        this._logger.debug("Toolbar customized. Chevron state is now " + chevronCurrentState);
        if (isChevronButtonVisible) {
            if (chevronCurrentState === 3 || chevronCurrentState === 2) {
                this.showWelcomeSlice();
            }
        } else {
            if (chevronCurrentState !== 1) {
                this._barApp.preferences.set(CHEVRON_STATE_PREF, 3);
            }
        }
    }]]></body>
            </method>

            <method name="updateChevronState">
                <body><![CDATA[    let button = window.document.querySelector("#" + this._appName + "-toggle-barless-button");
    if (!button) {
        return;
    }
    let allToolbarsAreCollapsed = !this._wndCtrl.getAlienToolbars(true).some(toolbar => toolbar.collapsed === false);
    button.setAttribute("cb-collapsed-state", allToolbarsAreCollapsed);
    this.setAttribute("data-collapsed", allToolbarsAreCollapsed);]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="aEvent"/>
                <body><![CDATA[    switch (aEvent.type) {
    case "beforecustomization":
        this.onToolbarCustomize(true, true);
        break;
    case "aftercustomization":
        this.onToolbarCustomize(false, true);
        this._wndCtrl.checkNeedSetBarlessMode();
        break;
    case this._appName + "-beforecustomization":
        this.onToolbarCustomize(true, false);
        break;
    case this._appName + "-aftercustomization":
        this.onToolbarCustomize(false, false);
        this.updateChevronState();
        break;
    default:
        break;
    }]]></body>
            </method>
        </implementation>
    </binding>

    <binding extends="chrome://global/content/bindings/toolbar.xml#toolbar" id="toolbar-old" inheritstyle="false">
        <content>
            <xul:box flex="1">
                <xul:box align="center" class="toolbar-container" flex="1">
                    <children/>
                </xul:box>
            </xul:box>
        </content>

        <implementation implements="nsIDOMEventListener">
            <field name="_appName">this.getAttribute("cb-app")</field>
            <field name="_barCore">
                Components.classes["@yandex.ru/custombarcore;" + this._appName].getService().wrappedJSObject
            </field>
            <field name="_barApp">this._barCore.application</field>
            <field name="_logger">this._barApp.getLogger("Toolbar")</field>

            <field name="_wndCtrl">window[this._appName + "OverlayController"]</field>

            <constructor><![CDATA[    let constructorEx = this._constructorEx.bind(this);
    function constructorExTimed() {
        window.setTimeout(constructorEx, 0);
    }
    if (document.readyState == "complete") {
        constructorExTimed();
    } else {
        document.addEventListener("readystatechange", function readystatechangeHandler(event) {
            if (document.readyState == "complete") {
                document.removeEventListener("readystatechange", readystatechangeHandler, false);
                constructorExTimed();
            }
        }, false);
    }
    setTimeout(function (me) {
        if (me && "_constructorEx" in me && !me.hasAttribute("currentset")) {
            let currentset = me.currentSet;
            if (currentset && currentset != "__empty") {
                me.setAttribute("currentset", currentset);
                me.ownerDocument.persist(me.id, "currentset");
            }
        }
    }, 4000, this);]]></constructor>

            <method name="_constructorEx">
                <body><![CDATA[    if (this.parentNode) {
        this.parentNode.addEventListener("beforecustomization", this, false);
        this.parentNode.addEventListener("aftercustomization", this, false);
        this.parentNode.addEventListener(this._appName + "-beforecustomization", this, false);
        this.parentNode.addEventListener(this._appName + "-aftercustomization", this, false);
    }]]></body>
            </method>

            <destructor><![CDATA[    if (this.parentNode) {
        this.parentNode.removeEventListener("beforecustomization", this, false);
        this.parentNode.removeEventListener("aftercustomization", this, false);
        this.parentNode.removeEventListener(this._appName + "-beforecustomization", this, false);
        this.parentNode.removeEventListener(this._appName + "-aftercustomization", this, false);
    }]]></destructor>

            <method name="_getComputedElementHeight">
                <parameter name="aElement"/>
                <body><![CDATA[    return parseInt(window.getComputedStyle(aElement, null).getPropertyValue("height"), 10);]]></body>
            </method>

            <method name="toggleCollapsed">
                <parameter name="forceCollapseState"/>
                <body><![CDATA[    let collapsedState = forceCollapseState !== undefined ? forceCollapseState : this.getAttribute("data-collapsed") !== "true";
    this.setAttribute("data-collapsed", collapsedState);
    this._wndCtrl.getAlienToolbars().forEach(function (toolbar) {
        if (!collapsedState && !toolbar.hasChildNodes()) {
            return;
        }
        toolbar.collapsed = collapsedState;
        document.persist(toolbar.id, "collapsed");
    });
    this.collapsed = this.hasChildNodes() ? collapsedState : true;
    document.persist(this.id, "collapsed");]]></body>
            </method>

            <method name="showWelcomeSlice">
                <body><![CDATA[    if (this._shouldShowChevronTutorial()) {
        this._showChevronTutorial();
    }]]></body>
            </method>

            <method name="_shouldShowChevronTutorial">
                <body><![CDATA[    let alienToolbars = this._wndCtrl.getAlienToolbars();
    if (!(alienToolbars.length > 0 || this.hasChildNodes())) {
        return false;
    }
    return true;]]></body>
            </method>

            <method name="_showChevronTutorial">
                <body><![CDATA[    let tutorialData = this._createChevronTutorialData();
    let target = this._createChevronTutorialTarget();
    setTimeout(function () {
        this.focusOnTabWithToolbar();
        this._barApp.tutorial.showHighlight(window, target, "wobble");
        this._barApp.tutorial.showInfo(window, target, tutorialData);
    }.bind(this), 300);]]></body>
            </method>

            <method name="_createChevronTutorialData">
                <body>
                    let text = '&welcome.newfeature; &welcome.howitworks;';
                    let confirmButtonText = '&welcome.tutorial.confirm-button.short;';
                    let openPanelsText = '&welcome.openpanels;';
                    let closePanelsText = '&welcome.closeallpanels;';
                <![CDATA[    let allToolbarsCollapsed = this._areAllToolbarsCollapsed();
    let data = Object.create(null);
    let callbackPrefix = this._appName + "-chevron-tutorial:";
    data.text = text.replace("{button}", "");
    data.icon = "chrome://" + this._appName + "/skin/dialogs/chevron-welcome/" + (allToolbarsCollapsed ? "chevron-collapsed.png" : "chevron.png");
    data.buttons = [
        {
            label: confirmButtonText,
            style: "primary",
            callback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "confirm")
        },
        {
            label: allToolbarsCollapsed ? openPanelsText : closePanelsText,
            callback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "use-feature", allToolbarsCollapsed)
        }
    ];
    data.options = {
        closeButtonCallback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "close"),
        targetCallback: this._chevronTutorialResponseHandler.bind(this, callbackPrefix + "target")
    };
    return data;]]></body>
            </method>

            <method name="_areAllToolbarsCollapsed">
                <body><![CDATA[    if (this.collapsed) {
        let alienToolbars = this._wndCtrl.getAlienToolbars();
        for (let i = 0; i < alienToolbars.length; i++) {
            if (!alienToolbars[i].collapsed) {
                return false;
            }
        }
        return true;
    }
    return false;]]></body>
            </method>

            <method name="_chevronTutorialResponseHandler">
                <parameter name="callbackID"/>
                <parameter name="allToolbarsCollapsed"/>
                <body><![CDATA[    this._barApp.tutorial.hideHighlight(window);
    let chevronButton = window.document.getElementById(this._appName + "-toggle-barless-button");
    let [
        prefix,
        action
    ] = (callbackID || "").split(":");
    if (action === "use-feature") {
        if (chevronButton) {
            chevronButton.collapseToolbars(!allToolbarsCollapsed);
        }
    } else if (action === "target") {
        this._barApp.tutorial.hideInfo(window);
    }
    chevronButton.setNoMoreTutorialState();]]></body>
            </method>

            <method name="_createChevronTutorialTarget">
                <body><![CDATA[    let data = Object.create(null);
    let chevronButton = data.node = document.getElementById(this._appName + "-toggle-barless-toolbaritem");
    data.targetName = this._appName + "-toggle-barless-toolbaritem";
    data.infoPanelPosition = "bottomcenter topright";
    data.addTargetListener = function (document, callback) {
        chevronButton.addEventListener("click", callback);
    };
    data.removeTargetListener = function (document, callback) {
        chevronButton.removeEventListener("click", callback);
    };
    return data;]]></body>
            </method>

            <method name="focusOnTabWithToolbar">
                <body><![CDATA[    let isHideChromeForLocation = function isHideChromeForLocation(spec) {
        if (XULBrowserWindow && typeof XULBrowserWindow.hideChromeForLocation == "function") {
            return XULBrowserWindow.hideChromeForLocation(spec);
        }
        Components.utils.reportError("Can not find XULBrowserWindow.hideChromeForLocation.");
        return false;
    };
    if (isHideChromeForLocation(gBrowser.currentURI.spec)) {
        let browserWithChrome = null;
        let browsers = gBrowser.browsers;
        for (let i = 0, len = browsers.length; i < len; i++) {
            if (!isHideChromeForLocation(browsers[i].currentURI.spec)) {
                browserWithChrome = gBrowser.tabContainer.childNodes[i];
                break;
            }
        }
        if (browserWithChrome) {
            gBrowser.selectedTab = browserWithChrome;
        } else {
            window.BrowserOpenTab();
        }
    }]]></body>
            </method>

            <method name="setForceHideAttribute">
                <body><![CDATA[    let forceHideAfterCustomize = this.collapsed && this.hasChildNodes();
    this.setAttribute("data-forceHide", forceHideAfterCustomize);]]></body>
            </method>

            <method name="onToolbarCustomize">
                <parameter name="aEnabled"/>
                <parameter name="aNativeEvent"/>
                <body><![CDATA[    if (aEnabled) {
        this.focusOnTabWithToolbar();
        if (aNativeEvent) {
            this.setForceHideAttribute();
        }
    } else {
        if (!this.collapsed && !this.hasChildNodes()) {
            this.collapsed = true;
            document.persist(this.id, "collapsed");
        } else {
            let forceHide = this.getAttribute("data-forceHide") === "true";
            if (!forceHide && this.hasChildNodes()) {
                this.collapsed = false;
                document.persist(this.id, "collapsed");
            } else if (forceHide) {
                this.collapsed = true;
                document.persist(this.id, "collapsed");
            }
        }
        const CHEVRON_STATE_PREF = "chevronState";
        let chevronCurrentState = this._barApp.preferences.get(CHEVRON_STATE_PREF, 0);
        let isChevronButtonVisible = this.hasChildNodes() || this._wndCtrl.getAlienToolbars().length > 0;
        this._logger.debug("Toolbar customized. Chevron state is now " + chevronCurrentState);
        if (isChevronButtonVisible) {
            if (chevronCurrentState === 3 || chevronCurrentState === 2) {
                this.showWelcomeSlice();
            }
        } else {
            if (chevronCurrentState !== 1) {
                this._barApp.preferences.set(CHEVRON_STATE_PREF, 3);
            }
        }
    }]]></body>
            </method>

            <method name="updateChevronState">
                <body><![CDATA[    let button = window.document.querySelector("#" + this._appName + "-toggle-barless-button");
    if (!button) {
        return;
    }
    let allToolbarsAreCollapsed = !this._wndCtrl.getAlienToolbars(true).some(toolbar => toolbar.collapsed === false);
    button.setAttribute("cb-collapsed-state", allToolbarsAreCollapsed);
    this.setAttribute("data-collapsed", allToolbarsAreCollapsed);]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="aEvent"/>
                <body><![CDATA[    switch (aEvent.type) {
    case "beforecustomization":
        this.onToolbarCustomize(true, true);
        break;
    case "aftercustomization":
        this.onToolbarCustomize(false, true);
        this._wndCtrl.checkNeedSetBarlessMode();
        break;
    case this._appName + "-beforecustomization":
        this.onToolbarCustomize(true, false);
        break;
    case this._appName + "-aftercustomization":
        this.onToolbarCustomize(false, false);
        this.updateChevronState();
        break;
    default:
        break;
    }]]></body>
            </method>
        </implementation>
    </binding>
</bindings>
