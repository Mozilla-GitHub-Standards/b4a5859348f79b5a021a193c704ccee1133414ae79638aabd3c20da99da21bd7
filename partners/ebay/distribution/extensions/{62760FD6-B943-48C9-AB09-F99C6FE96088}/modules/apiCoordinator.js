/* Copyright (C) 2007-2011 eBay Inc. All Rights Reserved. */const EXPORTED_SYMBOLS=["ApiCoordinator"];const Cc=Components.classes;const Ci=Components.interfaces;const Ce=Components.Exception;const Cr=Components.results;const Cu=Components.utils;var ApiCoordinator={_init:function(){try{Cu.import("resource://ebaycompanion/helpers/logger.js");Cu.import("resource://ebaycompanion/helpers/observers.js");Cu.import("resource://ebaycompanion/helpers/timer.js");Cu.import("resource://ebaycompanion/helpers/eventTracker.js");Cu.import("resource://ebaycompanion/helpers/apiHelper.js");Cu.import("resource://ebaycompanion/helpers/itemList.js");Cu.import("resource://ebaycompanion/helpers/warningNotificationHelper.js");Cu.import("resource://ebaycompanion/objects/item.js");Cu.import("resource://ebaycompanion/objects/notification.js");Cu.import("resource://ebaycompanion/apis/tradingApi.js");Cu.import("resource://ebaycompanion/apis/shoppingApi.js");Cu.import("resource://ebaycompanion/apis/clientAlertsApi.js");Cu.import("resource://ebaycompanion/apis/myEbayApplicationApi.js");Cu.import("resource://ebaycompanion/datasource.js");Cu.import("resource://ebaycompanion/constants.js");let that=this;this._observers=new Observers;this._observers.add(function()that._uninit(),"quit-application-granted");Constants.prefBranch.addObserver(function(){if(Datasource.activeAccount()){that.hardUpdate();}},"chosenSite");this._signInUpdate=false;this._numActiveUpdates=0;this._caConnectAttempts=5;}
catch(e){Logger.exception(e);}},_uninit:function(){try{this._observers.removeAll();}
catch(e){Logger.exception(e);}},get numActiveUpdates(){return this._numActiveUpdates;},get clientAlertsPollRate(){return this._clientAlertsPollRate?this._clientAlertsPollRate:5*60*1000;},resetNumActiveUpdates:function(){this._numActiveUpdates=0;},enableUpdates:function(aAutomaticLogin){try{const HARD_UPDATE_INTERVAL=1000*60*60*8;const SOFT_UPDATE_INTERVAL=1000*60*60*4;const CLIENT_ALERTS_RECONNECT_INTERVAL=5*60*1000;let that=this;if(this._updatesEnabled){this.disableUpdates();}
this._hardUpdateTimer=new Timer(function()that.hardUpdate(),HARD_UPDATE_INTERVAL,Timer.TYPE_REPEATING_SLACK);this._softUpdateTimer=new Timer(function()that.softUpdate(),SOFT_UPDATE_INTERVAL,Timer.TYPE_REPEATING_SLACK);let callback=function(numErrors,systemErrors){if(numErrors>0){Logger.error("Unable to log in to Client Alerts.");if(that._caConnectAttempts>0&&systemErrors){new Timer(function(){if(Datasource.activeAccount()){that._connectClientAlerts(callback,aAutomaticLogin);}},CLIENT_ALERTS_RECONNECT_INTERVAL,Timer.TYPE_ONE_SHOT);that._caConnectAttempts--;}
return;}
that._clientAlertsTimer=new Timer(function()that.clientAlertsUpdate(),that._optimalTimeToNextClientAlertsUpdate());}
this._connectClientAlerts(callback,aAutomaticLogin);this._itemsByEndingTime=new ItemList("itemsByEndTime");this._itemsByEndingTime.filter(function(item){return!item.get("isEnded");});this._itemsByEndingTime.sort(function(a,b){return a.get("endTime")<b.get("endTime");});this._itemsByEndingTime.addListener({itemAddedEvent:function(index,itemId){that._adjustClientAlertsPollPeriod();},itemRemovedEvent:function(index){that._adjustClientAlertsPollPeriod();}});this._updatesEnabled=true;this._signInUpdate=true;this.hardUpdate();if("undefined"==typeof(MessagesApi)){Cu.import("resource://ebaycompanion/apis/messagesApi.js");}
MessagesApi.getMessagesForTheDay();this.pingDealsAPI();}
catch(e){Logger.exception(e);}},disableUpdates:function(){try{if(!this._updatesEnabled){return;}
this._hardUpdateTimer.cancel();this._softUpdateTimer.cancel();if(this._clientAlertsTimer){this._clientAlertsTimer.cancel();delete this._clientAlertsTimer;}
ApiHelper.abortPendingRequests();delete this._updatesEnabled;this.resetNumActiveUpdates();}
catch(e){Logger.exception(e);}},_optimalTimeToNextClientAlertsUpdate:function(){const maxPollingPeriod=5*60*1000;const minPollingPeriod=10*1000;const pollRatio=0.2;const maxTimeLeftAfterEnded=-30000;let itemEndingSoonest=this._itemsByEndingTime.filteredItems[0];let endTime,ebayTime,timeLeft;let i=1;while(itemEndingSoonest){endTime=itemEndingSoonest.get("endTime");ebayTime=Datasource.getEbayTime().getTime();timeLeft=endTime-ebayTime;if(timeLeft>maxTimeLeftAfterEnded){break;}else{if(i>=this._itemsByEndingTime.filteredItems.length){itemEndingSoonest=null;}else{itemEndingSoonest=this._itemsByEndingTime.filteredItems[i];i++;}}}
let pollPeriod;if(itemEndingSoonest){timeLeft=Math.max(0,endTime-ebayTime);pollPeriod=Math.round(timeLeft*pollRatio);pollPeriod=Math.max(pollPeriod,minPollingPeriod);pollPeriod=Math.min(pollPeriod,maxPollingPeriod);}else{pollPeriod=maxPollingPeriod;}
this._clientAlertsPollRate=pollPeriod;return pollPeriod;},_adjustClientAlertsPollPeriod:function(){try{if(!this._clientAlertsTimer){return;}
let oldPollPeriod=this._clientAlertsTimer.interval;let newPollPeriod=this._optimalTimeToNextClientAlertsUpdate();if(newPollPeriod!=oldPollPeriod){let timeSinceLastUpdate=this._clientAlertsTimer.elapsedTime;let adjustedPeriod=newPollPeriod-timeSinceLastUpdate;adjustedPeriod=Math.max(0,adjustedPeriod);this._clientAlertsTimer.cancel();this._clientAlertsTimer=new Timer(let(that=this)function()that.clientAlertsUpdate(),adjustedPeriod);}}
catch(e){Logger.exception(e);}},_connectClientAlerts:function(callback,automaticLogin){let eventTracker=new EventTracker("Connect Client Alerts Sequence");let notificationsSet=eventTracker.addCallbackEvent();let gotAuthToken=eventTracker.addCallbackEvent();let loggedIn=eventTracker.addCallbackEvent();let systemErrors=false;eventTracker.doWhenAllFinished(function(){callback(eventTracker.eventErrors(),systemErrors);});let that=this;let errorWatcher=new EventTracker("Connect Client Alerts Calls");errorWatcher.doWhenAllFinished(function(numErrors){eventTracker.failRemainingEvents();});let notificationsCallback=function(result){if(result.errors){Logger.error("SetNotificationPreferences returned an error.");if(result.errors.systemErrors){systemErrors=true;}
eventTracker.failRemainingEvents();return;}
notificationsSet();errorWatcher.addRequest(TradingApi.getClientAlertsAuthToken(tokenCallback));};let tokenCallback=function(result){if(!result.token||result.errors){Logger.error("GetClientAlertsAuthToken returned an empty token or "+
"errors.");if(result.errors&&result.errors.systemErrors){systemErrors=true;}
eventTracker.failRemainingEvents();return;}
gotAuthToken();errorWatcher.addRequest(ClientAlertsApi.login(result.token,loginCallback));}
let loginCallback=function(result){if(!result.sessionData||!result.sessionId){Logger.error("No SessionData or SessionID returned by Login call");eventTracker.failRemainingEvents();return;}
loggedIn();}
if(automaticLogin){notificationsSet();errorWatcher.addRequest(TradingApi.getClientAlertsAuthToken(tokenCallback));}else{errorWatcher.addRequest(TradingApi.setNotificationPreferences(notificationsCallback));}},_updateStarted:function(updateName){this._numActiveUpdates++;Observers.notify(null,"ebay-update-started",updateName);},_updateFinished:function(updateName){if(this._numActiveUpdates>0){this._numActiveUpdates--;}
Observers.notify(null,"ebay-update-finished",updateName);},hardUpdate:function(callback){try{let that=this;let numPhaseOneCallsReceived=0;let buyingSellingCallsProcessed=0;this._updateStarted("Hard Update");var trackedItems=[];var trackedTransactions=[];var localCallback;let hardUpdateTracker=new EventTracker("Hard Update");let phaseOneComplete=hardUpdateTracker.addCallbackEvent();let phaseTwoComplete=hardUpdateTracker.addCallbackEvent();let accountUpdateComplete=hardUpdateTracker.addCallbackEvent();hardUpdateTracker.doWhenAllFinished(function(numErrors){that._updateFinished("Hard Update");if(that._signInUpdate){that._signInUpdate=false;Observers.notify(null,"ebay-sidebar-list-reset","sidebarList");}
if(callback){callback(numErrors);}});let apiErrors=false;let phaseOneTracker=new EventTracker("Hard Update Phase One");let phaseOneCallsReceived=phaseOneTracker.addCallbackEvent();phaseOneTracker.doWhenAllFinished(function(numErrors){if(numErrors>0||apiErrors){Logger.error("Errors in Hard Update Phase One; "+
"skipping removal of old items as the tracked item "+
"list is probably incorrect.");}else{let hashList={};for(let i=0;i<trackedItems.length;i++){hashList[trackedItems[i].get("itemId")]=true;}
let dsItems=Datasource.items();for each(let[itemId,item]in Iterator(dsItems)){if(!hashList[itemId]){Datasource.removeItem(item);}}
let dsTransactions=Datasource.getAllTransactions();for each(let[itemId,transactionArray]in Iterator(dsTransactions)){for each(let[transactionId,transaction]in Iterator(transactionArray)){let removeTransaction=true;for(let i=0;i<trackedTransactions.length;i++){let trackedTransaction=trackedTransactions[i];if(transaction.get("itemId")==trackedTransaction.get("itemId")&&transaction.get("transactionId")==trackedTransaction.get("transactionId")){removeTransaction=false;break;}}
if(removeTransaction){Datasource.removeTransaction(transaction);}}}}
phaseOneComplete(numErrors);});let phaseTwoTracker=new EventTracker("Hard Update Phase Two");let buyingSellingProcessed=phaseTwoTracker.addCallbackEvent();phaseTwoTracker.doWhenAllFinished(function(){phaseTwoComplete();});localCallback=function(result){if(result.error){Logger.warning("Hard update reported API errors");let notification=new Notification(WarningNotificationHelper.HARD_UPDATE_ERROR_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.download"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);apiErrors=true;return;}
numPhaseOneCallsReceived++;WarningNotificationHelper.dismissNotification(WarningNotificationHelper.HARD_UPDATE_ERROR_WARNING);let items=result.items;let transactions=result.transactions;let favoriteSellers=result.favoriteSellers;if(favoriteSellers){Datasource.clearAccountFavoriteSellers();for(let i=0;i<favoriteSellers.length;i++){Datasource.addFavoriteSeller(favoriteSellers[i]);}
Observers.notify(null,"ebay-favorite-sellers-updated",null);}
let favoriteSearches=result.favoriteSearches;if(favoriteSearches){Datasource.clearAccountFavoriteSearches();for(let i=0;i<favoriteSearches.length;i++){Datasource.addFavoriteSearch(favoriteSearches[i]);}
Observers.notify(null,"ebay-favorite-searches-updated",null);}
if(result.timestamp){Datasource.setEbayTime(result.timestamp);}
for(let i=0;i<transactions.length;i++){let resultTransaction=transactions[i];let transItemId=resultTransaction.get("itemId");let transItem=Datasource.items()[transItemId];if(!transItem){that._signInUpdate=true;}
Datasource.addOrUpdateTransaction(resultTransaction);}
trackedItems=trackedItems.concat(items);trackedTransactions=trackedTransactions.concat(transactions);if(numPhaseOneCallsReceived==2){phaseOneCallsReceived();}
var multipleItemsCallback=function(aItems,aRequestTracker){for each(let[aIndex,aItem]in Iterator(aItems)){Datasource.addOrUpdateItem(aItem);}
if(aRequestTracker){aRequestTracker();}else{buyingSellingCallsProcessed++;if(buyingSellingCallsProcessed==2){buyingSellingProcessed();}}};let itemsToUpdate=[];for(var k=0;k<items.length;k++){let tempItemId=items[k].get("itemId");let dsItem=Datasource.items()[tempItemId];if(!dsItem||!dsItem.get("isEnded")||!dsItem.type||!dsItem.get("isReserveMet")){itemsToUpdate.push(items[k]);}}
that._getMultipleItemsInfo(phaseTwoTracker,itemsToUpdate,multipleItemsCallback);}
getMyEbaySellingCallback=function(result){if(result.error){Logger.warning("Hard update reported API errors");let notification=new Notification(WarningNotificationHelper.HARD_UPDATE_ERROR_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.download"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);apiErrors=true;return;}
phaseTwoTracker.addRequest(TradingApi.getSellerList(result,localCallback));}
phaseOneTracker.addRequest(TradingApi.getMyeBayBuying(localCallback));phaseOneTracker.addRequest(TradingApi.getMyeBaySelling(getMyEbaySellingCallback));this.accountUpdate(accountUpdateComplete);this._adjustClientAlertsPollPeriod();}
catch(e){Logger.exception(e);}},_getMultipleItemsInfo:function(aEventTracker,aItemsToFetch,aCallback){var multipleItemsCallback=function(aItems,aResult,aRequestTracker){if(!aResult.items){Logger.warning("GetMultipleItems encountered an error, so the associated "+
"items will not be updated.");aEventTracker.failRemainingEvents();return;}
let resultItems=aResult.items;let tempItem;for(let j=0;j<resultItems.length;j++){if(!resultItems[j]){Logger.warning("GetMultipleItemsCallback encountered an error, so the "+
"associated item will not be updated.");aEventTracker.failRemainingEvents();return;}
tempItem=aItems[resultItems[j].get("itemId")];let ignoreProperties=["userMaxBid","userQuantityWinning","userQuantityBidFor","convertedMaxBid","convertedMaxBidCurrency","numWatching","bestOffer","bestOfferCurrency","convertedBestOffer","convertedBestOfferCurrency","bestOfferCount"];let newPageViews=resultItems[j].get("pageViews");let currentPageViews=tempItem.get("pageViews");if(newPageViews<currentPageViews){ignoreProperties=["userMaxBid","userQuantityWinning","userQuantityBidFor","convertedMaxBid","convertedMaxBidCurrency","numWatching","pageViews","bestOffer","bestOfferCurrency","convertedBestOffer","convertedBestOfferCurrency","bestOfferCount"];}
tempItem.updateTo(resultItems[j],null,ignoreProperties);}
aCallback(aItems,aRequestTracker);};while(aItemsToFetch.length>0){let itemListSubset=aItemsToFetch.splice(0,20);let requestTracker=aEventTracker.addCallbackEvent();aEventTracker.addRequest(ShoppingApi.getMultipleItems(itemListSubset,multipleItemsCallback,requestTracker));}
aCallback(new Array());},_getDealsInfo:function(aDealsToFetch,aCallback){let that=this;var multipleItemsCallback=function(aDealsArray,aResult){if(!aResult.items){Logger.warning("GetMultipleItems encountered an error, so the associated "+
"deals will not be updated.");aCallback(aDealsToFetch);return;}
let resultItems=aResult.items;let tempDeal;for(let j=0;j<aDealsArray.length;j++){let resultItemInfo=that._findItem(aDealsArray[j].get("itemId"),resultItems);if(!resultItemInfo){Logger.warning("GetMultipleItemsCallback encountered an error, so the "+
"associated deal will not be updated.");aCallback(aDealsToFetch);return;}
aDealsArray[j].set("sellerUserId",resultItemInfo.get("sellerUserId"));aDealsArray[j].set("sellerFeedbackRating",resultItemInfo.get("sellerFeedbackRating"));aDealsArray[j].set("sellerFeedbackPercent",resultItemInfo.get("sellerFeedbackPercent"));aDealsArray[j].set("pageViews",resultItemInfo.get("pageViews"));}
aCallback(aDealsArray);};ShoppingApi.getMultipleItems(aDealsToFetch,multipleItemsCallback);},_findItem:function(aItemId,aArray){let item=null;for(let i=0;i<aArray.length;i++){if(aArray[i].get("itemId")==aItemId){item=aArray[i];break;}}
return item;},softUpdate:function(callback){try{let that=this;this._updateStarted("Soft Update");var messagesCallback,multipleItemsCallback;let eventTracker=new EventTracker("Soft Update");eventTracker.doWhenAllFinished(function(numErrors){that._updateFinished("Soft Update");if(callback){callback(numErrors);}});messagesCallback=function(result){Datasource.activeAccount().updateProperty("numUnreadMessages",result.numUnreadMessages);}
eventTracker.addRequest(TradingApi.getMyMessages(messagesCallback));multipleItemsCallback=function(aItems){for each(let[aIndex,aItem]in Iterator(aItems)){Datasource.addOrUpdateItem(aItem);}};let items=Datasource.items();let itemsToUpdate=[];for each(let[itemId,item]in Iterator(items)){if(!item.get("isEnded")){itemsToUpdate.push(item);}}
this._getMultipleItemsInfo(eventTracker,itemsToUpdate,multipleItemsCallback);}
catch(e){Logger.exception(e);}},accountUpdate:function(callback){let localCallback;let that=this;let eventTracker=new EventTracker("Account Update");eventTracker.doWhenAllFinished(callback);let activeAccount=Datasource.activeAccount();localCallback=function(result){if(result&&result.feedbackRating){if(result.feedbackRating!=activeAccount.get("feedbackRating")){let info={};info.originalObject=activeAccount.copy();activeAccount.updateProperty("feedbackRating",result.feedbackRating);info.object=activeAccount;Observers.notify(info,"ebay-account-feedback-changed",null);}
activeAccount.updateProperty("registrationSite",result.registrationSite);if(result.email&&result.email.indexOf("@")!=-1){activeAccount.updateProperty("email",result.email);}}else{Logger.warning("getUser API call reported errors when "+
"trying to update user feedback score");}}
eventTracker.addRequest(TradingApi.getUser(localCallback));localCallback=function(result){let info={};info.originalObject=activeAccount.copy();let originalNumUnreadMessages=activeAccount.get("numUnreadMessages");activeAccount.updateProperty("numUnreadMessages",result.numUnreadMessages);info.object=activeAccount;if(result.numUnreadMessages>originalNumUnreadMessages||that._signInUpdate){Observers.notify(info,"ebay-account-unread-messages-changed",null);}}
eventTracker.addRequest(TradingApi.getMyMessages(localCallback));},clientAlertsUpdate:function(){try{let that=this;this._updateStarted("Client Alerts Update");let mainTracker=new EventTracker("Client Alerts Update");mainTracker.doWhenAllFinished(function(numErrors){let newPollPeriod=that._optimalTimeToNextClientAlertsUpdate();that._clientAlertsTimer.cancel();that._clientAlertsTimer=new Timer(function(){that.clientAlertsUpdate();},newPollPeriod);that._updateFinished("Client Alerts Update");});let publicAlertsCallback=function(result){try{let callback;if(result.feedbackReceived){callback=mainTracker.addCallbackEvent();that._updateFeedbackScore(callback);}
if(result.needUpdate.length>0){that._processNeedUpdateItems(result.needUpdate,mainTracker);}
if(result.removedItems.length>0){callback=mainTracker.addCallbackEvent();that._processRemovedItems(result.removedItems,callback);}}
catch(e){Logger.exception(e);}}
let userAlertsCallback=function(result){let activeItemsExist=false;for(let[itemId,item]in Iterator(Datasource.items())){if(!item.get("isEnded")){activeItemsExist=true;break;}}
if(activeItemsExist){mainTracker.addRequest(ClientAlertsApi.getPublicAlerts(result,publicAlertsCallback));}else{publicAlertsCallback(result);}}
let resultObject=ClientAlertsApi.emptyResultObject();mainTracker.addRequest(ClientAlertsApi.getUserAlerts(resultObject,userAlertsCallback));}
catch(e){this._updateFinished("Client Alerts Update");Logger.exception(e);}},_updateFeedbackScore:function(callback){let tracker=new EventTracker("Update Feedback Score");tracker.doWhenAllFinished(callback);let activeAccount=Datasource.activeAccount();let localCallback=function(result){if(result&&result.feedbackRating){if(result.feedbackRating!=activeAccount.get("feedbackRating")){let info={};info.originalObject=activeAccount.copy();activeAccount.updateProperty("feedbackRating",result.feedbackRating);info.object=activeAccount;Observers.notify(info,"ebay-account-feedback-changed",null);}}else{Logger.warning("getUserProfile API call reported errors when trying "+
"to update user feedback score");}}
tracker.addRequest(ShoppingApi.getUserProfile(localCallback));},_processNeedUpdateItems:function(aNeedUpdateItems,aEventTracker){let itemsToFetch={};let needBuying=false;let needSelling=false;let finishedEvent=null;let that=this;for each(let[aIndex,aItem]in Iterator(aNeedUpdateItems)){itemsToFetch[aItem.get("itemId")]=aItem;if(!needBuying||!needSelling){switch(aItem.type){case Item.ITEM_TYPE_BIDDING:case Item.ITEM_TYPE_WON:case Item.ITEM_TYPE_LOST:needBuying=true;break;case Item.ITEM_TYPE_SELLING:case Item.ITEM_TYPE_SOLD:case Item.ITEM_TYPE_UNSOLD:needSelling=true;break;}}};var buyingSellingCallback=function(aResult){if(aResult.errors){Logger.warn("_processNeedUpdateItems reported API errors");return;}
var items=new Array();var transactions=aResult.transactions;var favoriteSellers=aResult.favoriteSellers;if(favoriteSellers){Datasource.clearAccountFavoriteSellers();for(let i=0;i<favoriteSellers.length;i++){Datasource.addFavoriteSeller(favoriteSellers[i]);}}
let favoriteSearches=aResult.favoriteSearches;if(favoriteSearches){Datasource.clearAccountFavoriteSearches();for(let i=0;i<favoriteSearches.length;i++){Datasource.addFavoriteSearch(favoriteSearches[i]);}
Observers.notify(null,"ebay-favorite-searches-updated",null);}
if(aResult.timestamp){Datasource.setEbayTime(aResult.timestamp);}
if(transactions){for(let i=0;i<transactions.length;i++){Datasource.addOrUpdateTransaction(transactions[i]);}}
for each(let[aIndex,aItem]in Iterator(aResult.items)){if(itemsToFetch[aItem.get('itemId')]){items.push(aItem);}}
var multipleItemsCallback=function(aItems,aRequestTracker){for each(let[aIndex,aItem]in Iterator(aItems)){Datasource.addOrUpdateItem(aItem);}
if(aRequestTracker){aRequestTracker();}
if(finishedEvent){finishedEvent();}};that._getMultipleItemsInfo(aEventTracker,items,multipleItemsCallback);};if(needBuying){if(!finishedEvent){finishedEvent=aEventTracker.addCallbackEvent();}
aEventTracker.addRequest(TradingApi.getMyeBayBuying(buyingSellingCallback));}
if(needSelling){if(!finishedEvent){finishedEvent=aEventTracker.addCallbackEvent();}
aEventTracker.addRequest(TradingApi.getMyeBaySelling(buyingSellingCallback));}
if(!needBuying&&!needSelling){buyingSellingCallback({items:aNeedUpdateItems});}},_processRemovedItems:function(removedItems,callback){let mainTracker=new EventTracker("Removed Items");mainTracker.doWhenAllFinished(callback);for(let i=0;i<removedItems.length;i++){let dsItem=Datasource.items()[removedItems[i]];if(dsItem){Datasource.removeItem(dsItem);}else{Logger.warning("Client Alerts tried to remove item "+removedItems[i]+
", which isn't being tracked.");}}
new Timer(callback,0);},addToWatchList:function(itemId,callback){try{if(Datasource.items()[itemId]){Logger.warning("addToWatchList called for item "+itemId+", which is "+
"already being tracked.");return;}
this._updateStarted("Add To Watch List");let eventTracker=new EventTracker("Add Item to Watchlist");let finishedGettingItem=eventTracker.addCallbackEvent();eventTracker.doWhenAllFinished(callback);let that=this;let localCallback=function(result){that._updateFinished("Add To Watch List");if(result.error){Logger.warning("Adding item failed because the API reported an error.");let notification=new Notification(WarningNotificationHelper.ADD_TO_WATCHLIST_ERROR_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.addWatch"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);return;}
let getSingleItemCallback=function(result){let item=result.item;if(!item||result.error){Logger.warning("AddItem encountered an error, so the associated "+
"item will not be updated.");let notification=new Notification(WarningNotificationHelper.ADD_TO_WATCHLIST_ERROR_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.addWatch"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);return;}
item.type=Item.ITEM_TYPE_WATCHING;Datasource.addOrUpdateItem(item);WarningNotificationHelper.dismissNotification(WarningNotificationHelper.ADD_TO_WATCHLIST_ERROR_WARNING);finishedGettingItem();}
ShoppingApi.getSingleItem(itemId,getSingleItemCallback);}
eventTracker.addRequest(TradingApi.addToWatchList(itemId,localCallback));}
catch(e){Logger.exception(e);}},removeFromWatchList:function(itemId,callback){try{if(!Datasource.items()[itemId]){Logger.warning("removeFromWatchList called for item "+itemId+
", which is not being tracked.");return;}
if(Datasource.transactions(itemId)){Logger.warning("removeFromWatchList called for item "+itemId+
", which has tracked transactions.");return;}
this._updateStarted("Remove From Watch List");let eventTracker=new EventTracker("Remove Item from Watchlist");let removedFromDatasource=eventTracker.addCallbackEvent();eventTracker.doWhenAllFinished(callback);let that=this;let localCallback=function(result){that._updateFinished("Remove From Watch List");if(result.error){Logger.warning("Skipping removal of the item from "+
"datasource because the API reported an error.");let notification=new Notification(WarningNotificationHelper.REMOVE_FROM_WATCHLIST_ERROR_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.stopWatch"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);return;}
let item=Datasource.items()[itemId];if(item){Datasource.removeItem(item);}
WarningNotificationHelper.dismissNotification(WarningNotificationHelper.REMOVE_FROM_WATCHLIST_ERROR_WARNING);removedFromDatasource();}
eventTracker.addRequest(TradingApi.removeFromWatchList(itemId,localCallback));}
catch(e){Logger.exception(e);}},removeFromDidntWinList:function(aItemId,callback){try{if(!Datasource.items()[aItemId]){Logger.warning("removeFromDidntWinList called for item "+itemId+
", which is not being tracked.");return;}
this._updateStarted("Remove From Didn't Win List");let eventTracker=new EventTracker("Remove Item from Didn't win list");let removedFromDatasource=eventTracker.addCallbackEvent();eventTracker.doWhenAllFinished(callback);let that=this;let localCallback=function(result){that._updateFinished("Remove From Didn't Win List");if(result.error){Logger.warning("Skipping removal of the item from "+
"datasource because the API reported an error.");let notification=new Notification(WarningNotificationHelper.REMOVE_FROM_DIDNTWINLIST_ERROR_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.removeFromDidntWin.list"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);return;}
let item=Datasource.items()[aItemId];if(item){Datasource.removeItem(item);}
WarningNotificationHelper.dismissNotification(WarningNotificationHelper.REMOVE_FROM_DIDNTWINLIST_ERROR_WARNING);removedFromDatasource();}
eventTracker.addRequest(MyEbayApplicationApi.removeFromDidntWinList(aItemId,localCallback));}
catch(e){Logger.exception(e);}},removeFromWonList:function(aItem,callback){try{if(!Datasource.items()[aItem.get("itemId")]){Logger.warning("removeFromWonList called for item "+itemId+
", which is not being tracked.");return;}
let itemId=aItem.get("itemId");let transactionId=aItem.transaction.get("transactionId");this._updateStarted("Remove From Won List");let eventTracker=new EventTracker("Remove Item from Won list");let removedFromDatasource=eventTracker.addCallbackEvent();eventTracker.doWhenAllFinished(callback);let that=this;let localCallback=function(result){that._updateFinished("Remove From Won List");if(result.error){Logger.warning("Skipping removal of the item from "+
"datasource because the API reported an error.");let notification=new Notification(WarningNotificationHelper.REMOVE_FROM_WONLIST_ERROR_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.removeFromWon.list"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);return;}
let dbTransaction=Datasource.transactions(itemId)[transactionId];if(dbTransaction){Datasource.removeTransaction(dbTransaction);}
WarningNotificationHelper.dismissNotification(WarningNotificationHelper.REMOVE_FROM_WONLIST_ERROR_WARNING);removedFromDatasource();}
eventTracker.addRequest(MyEbayApplicationApi.removeFromWonList(itemId,transactionId,localCallback));}
catch(e){Logger.exception(e);}},pingDealsAPI:function(){if(Constants.prefBranch.get("enable.deals.api.requests")){if("undefined"==typeof(DealsApi)){Cu.import("resource://ebaycompanion/apis/dealsApi.js");}
let that=this;let getDealsCallback=function(aDealsArray){Datasource.dailyDeals=aDealsArray;let getDealsInfoCallback=function(aUpdatedDealsArray){Datasource.dailyDeals=aUpdatedDealsArray;Observers.notify(null,"ebay-daily-deals-info-updated",null);};that._getDealsInfo(Datasource.dailyDeals,getDealsInfoCallback);Observers.notify(null,"ebay-daily-deals-updated",null);};DealsApi.getDailyDeals(getDealsCallback);}else{Logger.warning("DEALS API ACCESS DISABLED\n");}}};ApiCoordinator._init();