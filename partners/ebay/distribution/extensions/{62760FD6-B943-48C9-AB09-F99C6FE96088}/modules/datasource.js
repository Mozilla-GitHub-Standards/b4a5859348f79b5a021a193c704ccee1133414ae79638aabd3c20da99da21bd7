/* Copyright (C) 2007-2011 eBay Inc. All Rights Reserved. */const EXPORTED_SYMBOLS=["Datasource"];const Cc=Components.classes;const Ci=Components.interfaces;const Ce=Components.Exception;const Cr=Components.results;const Cu=Components.utils;Cu.import("resource://ebaycompanion/helpers/logger.js");var Datasource={_init:function(){try{Cu.import("resource://ebaycompanion/helpers/observers.js");Cu.import("resource://ebaycompanion/helpers/timer.js");Cu.import("resource://ebaycompanion/helpers/httpRequestHeaderVisitor.js");Cu.import("resource://ebaycompanion/constants.js");if(Constants.prefBranch.get("debugging.enabled")){Cu.import("resource://ebaycompanion/debugger.js");}
this._observers=new Observers;let that=this;this._observers.add(function()that._uninit(),"quit-application-granted");this._observers.add(function(subject,topic,data)
that._markObjectDirty(subject.object),"ebay-account-property-updated");this._observers.add(function(subject,topic,data)
that._markObjectDirty(subject.object),"ebay-item-property-updated");this._observers.add(function(subject,topic,data)
that._markObjectDirty(subject.object),"ebay-transaction-property-updated");this._observers.add(function(subject,topic,data)
that._markObjectDirty(subject.object),"ebay-system-message-property-updated");this._observers.add(function(aSubject,aTopic,aData)
that._extractSignInUsername(aSubject),"http-on-modify-request");new Timer(function(){that._flushDirtyObjects();},60*1000,Timer.TYPE_REPEATING_PRECISE);new Timer(function(){if(typeof(ObjectsStorage)=="undefined"){Cu.import("resource://ebaycompanion/storage/objectsStorage.js");}
that._activeAccount=ObjectsStorage.activeAccount();that._items={};that._transactions={};that._favoriteSellers=[];that._favoriteSearches=[];that._dailyDeals=[];that._clientRoverIds=ObjectsStorage.getRoverIds();that._clientInstallTrackingCodes=ObjectsStorage.getInstallTrackingCodes();let currentVersion=Constants.prefBranch.get("version");if(currentVersion&&currentVersion.match(/^1\.(.)*$/g)&&that._activeAccount){that.logoutUser();}
that.tryAutomaticConnect();},500,Timer.TYPE_ONE_SHOT);}catch(e){Logger.exception(e);}},_uninit:function(){try{this._flushDirtyObjects();this._observers.removeAll();}
catch(e){Logger.exception(e);}},_extractSignInUsername:function(aHTTPRequest){aHTTPRequest.QueryInterface(Ci.nsIHttpChannel);let headerArray=new Array();let url=aHTTPRequest.URI.asciiSpec;const AUTH_AUTH_LOGIN_URL_REGEXP=/^https:\/\/signin(\.sandbox)?(\.\w{2,4})?\.ebay(\.\w{2,3}){1,2}\/ws\/eBayISAPI\.dll\?/i;let result=url.match(AUTH_AUTH_LOGIN_URL_REGEXP);if(result!=null&&!this.activeAccount()){let visitor=new HttpRequestHeaderVisitor(aHTTPRequest);let requestHeaders=visitor.inspectRequest();let postData=visitor.getPostData();if(postData){let parameters=postData.split("&");let postParamsArray=new Array();for(var i=0;i<parameters.length;i++){let param=parameters[i].split("=");postParamsArray[param[0]]=param[1];}
let username=postParamsArray["userid"];this._latestUsername=username;}}},generateLoginUrl:function(sourceAreaName,useSandbox,generateUrlCallback){let that=this;let runame=Constants.getRuname(useSandbox,this.homeSite());if(typeof(TradingApi)=="undefined"){Cu.import("resource://ebaycompanion/apis/tradingApi.js");}
let getSessionIdCallback=function(result){try{if(!result.sessionId||result.errors){Logger.error("Unable to retrieve a SessionID. Login aborted.");Cu.import("resource://ebaycompanion/helpers/warningNotificationHelper.js");Cu.import("resource://ebaycompanion/objects/notification.js");let notification=new Notification(WarningNotificationHelper.LOGIN_FAILED_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.connection"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);Observers.notify(null,"ebay-sign-in-stop",null);return;}else{that._loginSessionId=result.sessionId;let params="isSandboxAccount="+useSandbox;let encodedParams=encodeURIComponent(params);let templateArgs={runame:runame,sessid:that._loginSessionId,ruparams:encodedParams};let url;if(!useSandbox){url=Constants.getUrl(sourceAreaName,"authAuth",templateArgs);}else{url=Constants.getUrl(sourceAreaName,"authAuthSandbox",templateArgs);}
generateUrlCallback(url);Observers.notify(null,"ebay-sign-in-stop",null);}}catch(e){Logger.exception(e);Observers.notify(null,"ebay-sign-in-stop",null);}};TradingApi.getSessionID(useSandbox,getSessionIdCallback);Observers.notify(null,"ebay-sign-in-start",null);},tryAutomaticConnect:function(){let connectAutomatically=Constants.prefBranch.get("connectAutomatically");let activeAccount=this._activeAccount;if(activeAccount&&connectAutomatically){if(typeof(TradingApi)=="undefined"){Cu.import("resource://ebaycompanion/apis/tradingApi.js");}
Observers.notify(null,"ebay-sign-in-start",null);this._loadDataFromStorage();if(typeof(EventTracker)=="undefined"){Cu.import("resource://ebaycompanion/helpers/eventTracker.js");}
let eventTracker=new EventTracker("Installation and upgrade report");let extensionActivated=eventTracker.addCallbackEvent();eventTracker.doWhenAllFinished();let isSandboxAccount=activeAccount.get("isSandboxAccount");let reportInstallCallback=let(that=this)function(result){try{if(result.error){Logger.warning("Extension installation/activation report reported errors");if(result.existingToolbarId){Logger.warning("There is already a toolbarId stored locally");Constants.prefBranch.set("firstSignIn",false);}else{extensionActivated();}}
if(result.toolbarId){Logger.log("Installation/Activation reported through API. Returned "+
"toolbarId: "+result.toolbarId);if(typeof(PropertiesStorage)=="undefined"){Cu.import("resource://ebaycompanion/storage/propertiesStorage.js");}
PropertiesStorage.set("ToolbarId",result.toolbarId);Constants.prefBranch.set("firstSignIn",false);let reportUpgrade=Constants.prefBranch.get("reportUpgrade");if(reportUpgrade){let ebayAuthToken=that._activeAccount.get("token");let credentialsArray={eBayAuthToken:ebayAuthToken};TradingApi.reportToolbarActivity("Upgrade",credentialsArray,isSandboxAccount,reportUpgradeCallback);}
extensionActivated();}}
catch(e){Logger.exception(e);}}
let reportUpgradeCallback=function(result){try{if(result.error){Logger.warning("Extension upgrade report reported errors");}else{Logger.log("Upgrade reported successfully");}
Constants.prefBranch.set("reportUpgrade",false);}
catch(e){Logger.exception(e);}}
new Timer(let(that=this)function(){let firstSignIn=Constants.prefBranch.get("firstSignIn");that._loggedIn(firstSignIn,true);if(firstSignIn){let ebayAuthToken=activeAccount.get("token");let credentialsArray={eBayAuthToken:ebayAuthToken};let request=TradingApi.reportToolbarActivity("Install",credentialsArray,isSandboxAccount,reportInstallCallback);that.requestTrackingPixel(true);if(!request){extensionActivated();}}else{let reportUpgrade=Constants.prefBranch.get("reportUpgrade");if(reportUpgrade){let ebayAuthToken=that._activeAccount.get("token");let credentialsArray={eBayAuthToken:ebayAuthToken};TradingApi.reportToolbarActivity("Upgrade",credentialsArray,isSandboxAccount,reportUpgradeCallback);}
extensionActivated();}},0);}else if(!connectAutomatically){this._activeAccount=null;this._latestUsername=null;ObjectsStorage.setActiveAccount(null);}},loginUser:function(username,isSandboxAccount,callback){if(!this._loginSessionId){Logger.error("Attempt to login when no Session ID was generated!",Logger.DUMP_STACK);return false;}
if(typeof(TradingApi)=="undefined"){Cu.import("resource://ebaycompanion/apis/tradingApi.js");}
if(typeof(EventTracker)=="undefined"){Cu.import("resource://ebaycompanion/helpers/eventTracker.js");}
let eventTracker=new EventTracker("User Login");let gotToken=eventTracker.addCallbackEvent();let updatedAccount=eventTracker.addCallbackEvent();let extensionActivated=eventTracker.addCallbackEvent();eventTracker.doWhenAllFinished(callback);let tokenCallback=let(that=this)function(result){try{let token=result.token;if(token==""||result.errors){Logger.error("FetchToken returned an empty token; login aborted.");Cu.import("resource://ebaycompanion/helpers/warningNotificationHelper.js");Cu.import("resource://ebaycompanion/objects/notification.js");let notification=new Notification(WarningNotificationHelper.LOGIN_FAILED_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.notification.error.connection"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);Observers.notify(null,"ebay-sign-in-stop",null);return;}
if(that._activeAccount){that.logoutUser();}
let storedAccount=ObjectsStorage.getAccount(username,isSandboxAccount);if(storedAccount){that._activeAccount=storedAccount;that._activeAccount.set("token",token);Constants.prefBranch.set("prevent.first.feedback.score.notification",false);accountUpdateCallback(0);}else{Cu.import("resource://ebaycompanion/objects/account.js");that._activeAccount=new Account(username,isSandboxAccount);that._activeAccount.set("token",token);that._activeAccount.set("registrationSite",Constants.prefBranch.get("chosenSite"));that._activeAccount.set("feedbackRating",0);that._activeAccount.set("numUnreadMessages",0);Constants.prefBranch.set("prevent.first.feedback.score.notification",true);if(typeof(ApiCoordinator)=="undefined"){Cu.import("resource://ebaycompanion/apiCoordinator.js");}
ApiCoordinator.accountUpdate(accountUpdateCallback);}
gotToken();}
catch(e){Logger.exception(e);}}
let accountUpdateCallback=let(that=this)function(numErrors){try{ObjectsStorage.store(that._activeAccount);ObjectsStorage.setActiveAccount(that._activeAccount);that._loadDataFromStorage();that._loggedIn(false,false);let firstSignIn=Constants.prefBranch.get("firstSignIn");if(firstSignIn){let ebayAuthToken=that._activeAccount.get("token");let credentialsArray={eBayAuthToken:ebayAuthToken};let request=TradingApi.reportToolbarActivity("Install",credentialsArray,isSandboxAccount,reportInstallCallback);that.requestTrackingPixel(true);if(!request){extensionActivated();}}else{let reportUpgrade=Constants.prefBranch.get("reportUpgrade");if(reportUpgrade){let ebayAuthToken=that._activeAccount.get("token");let credentialsArray={eBayAuthToken:ebayAuthToken};TradingApi.reportToolbarActivity("Upgrade",credentialsArray,isSandboxAccount,reportUpgradeCallback);}
extensionActivated();}
updatedAccount();}
catch(e){Logger.exception(e);}}
let reportInstallCallback=let(that=this)function(result){try{if(result.error){Logger.warning("Extension installation/activation report reported errors");if(result.existingToolbarId){Logger.warning("There is already a toolbarId stored locally");Constants.prefBranch.set("firstSignIn",false);}else{extensionActivated();}}
if(result.toolbarId){Logger.log("Installation/Activation reported through API. Returned "+
"toolbarId: "+result.toolbarId);if(typeof(PropertiesStorage)=="undefined"){Cu.import("resource://ebaycompanion/storage/propertiesStorage.js");}
PropertiesStorage.set("ToolbarId",result.toolbarId);Constants.prefBranch.set("firstSignIn",false);let reportUpgrade=Constants.prefBranch.get("reportUpgrade");if(reportUpgrade){let ebayAuthToken=that._activeAccount.get("token");let credentialsArray={eBayAuthToken:ebayAuthToken};TradingApi.reportToolbarActivity("Upgrade",credentialsArray,isSandboxAccount,reportUpgradeCallback);}
extensionActivated();}}
catch(e){Logger.exception(e);}}
let reportUpgradeCallback=let(that=this)function(result){try{if(result.error){Logger.warning("Extension upgrade report reported errors");}else{Logger.log("Upgrade reported successfully");}
Constants.prefBranch.set("reportUpgrade",false);}
catch(e){Logger.exception(e);}}
TradingApi.fetchToken(isSandboxAccount,this._loginSessionId,tokenCallback);return true;},_loggedIn:function(aDisableNotifications,aAutomaticLogin){try{let info={};info.object=this._activeAccount;Observers.notify(info,"ebay-account-logged-in",null);if(typeof(AlertsGenerator)=="undefined"){Cu.import("resource://ebaycompanion/alertsGenerator.js");}
if(typeof(ApiCoordinator)=="undefined"){Cu.import("resource://ebaycompanion/apiCoordinator.js");}
ApiCoordinator.enableUpdates(aAutomaticLogin);if(!aDisableNotifications){Constants.prefBranch.set("prevent.first.feedback.score.notification",false);}}
catch(e){Logger.exception(e);}},logoutUser:function(){try{let info={};if(!this._activeAccount){Logger.warning("Attempt to log out when there is no active account.");}else{ApiCoordinator.disableUpdates();AlertsGenerator.disable();info.object=this._activeAccount.copy();}
this._flushDirtyObjects();delete this._activeAccount;this._activeAccount=null;this._latestUsername=null;ObjectsStorage.setActiveAccount(null);Observers.notify(info,"ebay-account-logged-out",null);}
catch(e){Logger.exception(e);}},showSecuritySignOutWarningNotification:function(){if(typeof(WarningNotificationHelper)=="undefined"){Cu.import("resource://ebaycompanion/helpers/warningNotificationHelper.js");}
if(typeof(Notification)=="undefined"){Cu.import("resource://ebaycompanion/objects/notification.js");}
let notification=new Notification(WarningNotificationHelper.SECURITY_SIGN_OUT_WARNING);notification.set("content",Constants.stringBundle.getString("ecSidebar.warning.signout"));notification.set("priority",1);WarningNotificationHelper.queueNotification(notification);},requestTrackingPixel:function(aClientTrackingPixel){let time=Date.now();let random=String(Math.random()).split(".")[1];let uniqueId=time+random;let trackTag=null;if(!aClientTrackingPixel){Cu.import("resource://ebaycompanion/helpers/preferences.js");let locale=Preferences.get("general.useragent.locale").toUpperCase();switch(locale){case"EN-US":case"EN-GB":case"FR":case"DE":case"GA-IE":case"ZH-TW":case"ZH-CN":case"ES-ES":case"NL":case"HI-IN":case"PL":trackTag=Constants.installTrackTags[locale];break;default:trackTag=Constants.installTrackTags["EN-US"];}}else{trackTag=this.getClientTrackingCode(this.homeSite(),false);}
if(trackTag){let args={tracktag:trackTag,uniqueid:uniqueId};let request=Cc["@mozilla.org/xmlextras/xmlhttprequest;1"].createInstance(Ci.nsIXMLHttpRequest);let url=Constants.getUrl("installTracker","installTrack",args);request.open("GET",url,true);request.addEventListener("load",function(){let sanDiskBuild=Constants.prefBranch.get("SanDiskBuild");let message="";if(sanDiskBuild&&aClientTrackingPixel){message+="San Disk-Build ";}else if(aClientTrackingPixel){message+="Client-Specific ";}
message+="Tracking Pixel Loaded: "+url;Logger.log(message);},false);request.addEventListener("error",function(){let message="Error loading ";message+=aClientTrackingPixel?"client-specific ":"";message+="tracking pixel: "+url;Logger.error(message);},false);request.send(null);}else{if(!aClientTrackingPixel){Logger.log("No installation tracking code found, so the installation "+
"tracking pixel is NOT going to be requested.");}else{Logger.log("No client-specific installation tracking code found, "+
"so the installation tracking pixel is NOT going to be requested.");}}},homeSite:function(){let siteId;if(Constants.prefBranch.get("useRegistrationSite")&&this._activeAccount)
{siteId=this._activeAccount.get("registrationSite");}else{siteId=Constants.prefBranch.get("chosenSite");}
return siteId;},activeAccount:function(){return this._activeAccount;},getClientTrackingCode:function(aCountry,aIsRover){if(aIsRover&&!this._clientRoverIds){if(typeof(ObjectsStorage)=="undefined"){Cu.import("resource://ebaycompanion/storage/objectsStorage.js");}
this._clientRoverIds=ObjectsStorage.getRoverIds();}
let trackingCodesArray=aIsRover?this._clientRoverIds:this._clientInstallTrackingCodes;let trackingCodeValue=null;if(trackingCodesArray){for(var i=0;i<trackingCodesArray.length;i++){let trackingCode=trackingCodesArray[i];if(trackingCode.get("country")==aCountry){trackingCodeValue=trackingCode.get("value");break;}}}
return trackingCodeValue;},setActiveAccount:function(aAccount){this._activeAccount=aAccount;ObjectsStorage.setActiveAccount(aAccount);ObjectsStorage.store(aAccount);},items:function(){return this._items;},favoriteSearches:function(){return this._favoriteSearches;},latestUsername:function(){return this._latestUsername;},addOrUpdateItem:function(item){let itemId=item.get("itemId");let dsItem=this._items[itemId];if(dsItem){let originalObject=dsItem.copy();if(originalObject.get("pageViews")>0&&item.get("pageViews")==0){item.set("pageViews",originalObject.get("pageViews"));}
let objectChanged=dsItem.updateTo(item);if(objectChanged){let info={};info.object=dsItem;info.originalObject=originalObject;Observers.notify(info,"ebay-item-changed",null);}}else{this._items[itemId]=item;this._markObjectDirty(item);let info={}
info.object=item;Observers.notify(info,"ebay-item-new",null);}},removeItem:function(item){let itemId=item.get("itemId");if(!itemId){Logger.warning("Empty object passed to removeItem.",Logger.DUMP_STACK);}
let transactions=this._transactions[itemId];if(transactions){for each(let[transactionId,transaction]in Iterator(transactions)){let info={};info.object=transaction;Observers.notify(info,"ebay-transaction-removed",null);}
delete this._transactions[itemId];}
let info={};info.object=this._items[itemId];Observers.notify(info,"ebay-item-removed",null);ObjectsStorage.removeItemFromAccount(this._items[itemId],this._activeAccount);delete this._items[itemId];},getAllTransactions:function(){return this._transactions;},transactions:function(itemId){return this._transactions[itemId];},addOrUpdateTransaction:function(transaction){let itemId=transaction.get("itemId");let transactionId=transaction.get("transactionId");let transactions=this._transactions[itemId];if(transactions&&transactions[transactionId]){let dsTransaction=transactions[transactionId];let originalObject=dsTransaction.copy();let objectChanged=dsTransaction.updateTo(transaction);if(objectChanged){let info={};info.object=dsTransaction;info.originalObject=originalObject;Observers.notify(info,"ebay-transaction-changed",null);}}else{if(!transactions){this._transactions[itemId]=[];transactions=this._transactions[itemId];}
transactions[transactionId]=transaction;this._markObjectDirty(transaction);let info={};info.object=transaction;Observers.notify(info,"ebay-transaction-new",null);}},removeTransaction:function(aTransaction){let itemId=aTransaction.get("itemId");let transactions=this._transactions[itemId];if(transactions){let newArray=[];let dsItem=this._items[itemId];let transRemoved=false;for each(let[transactionId,transaction]in Iterator(transactions)){if(transactionId==aTransaction.get("transactionId")){ObjectsStorage.removeTransaction(aTransaction);dsItem.transaction=aTransaction;transRemoved=true;}else{newArray[transactionId]=transaction;}}
delete this._transactions[itemId];for each(let[transactionId,transaction]in Iterator(newArray)){if(!this._transactions[itemId]){this._transactions[itemId]=[];}
this._transactions[itemId][transactionId]=transaction;}
this._removeFromDirtyObjects(aTransaction);if(transRemoved){let info={};info.object=dsItem;Observers.notify(info,"ebay-transaction-item-removed",null);}}},favoriteSellers:function(){return this._favoriteSellers;},addFavoriteSeller:function(aFavoriteSeller){this._favoriteSellers[this._favoriteSellers.length]=aFavoriteSeller;this._markObjectDirty(aFavoriteSeller);},clearAccountFavoriteSellers:function(){this._favoriteSellers=[];ObjectsStorage.removeFavoriteSellersFromAccount(this._activeAccount);},addFavoriteSearch:function(aFavoriteSearch){this._favoriteSearches[this._favoriteSearches.length]=aFavoriteSearch;this._markObjectDirty(aFavoriteSearch);},clearAccountFavoriteSearches:function(){this._favoriteSearches=[];ObjectsStorage.removeFavoriteSearchesFromAccount(this._activeAccount);},get dailyDeals(){return this._dailyDeals;},set dailyDeals(aValue){this._dailyDeals=aValue;},addOrUpdateSystemMessage:function(aSystemMessage){let validToTime=aSystemMessage.get("validToTime");let validFromTime=aSystemMessage.get("validFromTime");let ebayTime=this.getEbayTime().getTime();if(validFromTime<ebayTime&&ebayTime<validToTime){let userId=aSystemMessage.get("userId");let messageId=aSystemMessage.get("messageId");let storedMessage=ObjectsStorage.getSystemMessage(messageId,userId);let generateNotification=false;if(storedMessage){let numberOfViews=storedMessage.get("numberOfViews");let maxNumberOfViews=storedMessage.get("maxNumberOfViews");if(maxNumberOfViews>numberOfViews){numberOfViews++;storedMessage.updateProperty("numberOfViews",numberOfViews);generateNotification=true;}}else{this._markObjectDirty(aSystemMessage);generateNotification=true;}
if(generateNotification){if("undefined"==typeof(MessagesApi)){Cu.import("resource://ebaycompanion/apis/messagesApi.js");}
MessagesApi.generateSystemMessageNotification(aSystemMessage);}}},setEbayTime:function(claimedTime){if(this._lastEbayTime&&claimedTime<this._lastEbayTime){return;}
this._lastEbayTime=claimedTime;let localTime=Date.now();let ebayTime=claimedTime.getTime();let offset=ebayTime-localTime;this._ebayTimeOffset=offset;if(typeof(PropertiesStorage)=="undefined"){Cu.import("resource://ebaycompanion/storage/propertiesStorage.js");}
PropertiesStorage.set("ebayTimeOffset",this._ebayTimeOffset);},getEbayTime:function(){if(!this._ebayTimeOffset){if(typeof(PropertiesStorage)=="undefined"){Cu.import("resource://ebaycompanion/storage/propertiesStorage.js");}
let storedOffset=PropertiesStorage.get("ebayTimeOffset");this._ebayTimeOffset=(storedOffset!=null)?Number(storedOffset):0;}
return new Date(Date.now()+this._ebayTimeOffset);},getInstanceIdentifier:function(){if(!this._instanceIdentifier){if(typeof(PropertiesStorage)=="undefined"){Cu.import("resource://ebaycompanion/storage/propertiesStorage.js");}
let storedIdentifier=PropertiesStorage.get("instanceIdentifier");if(null==storedIdentifier){this._instanceIdentifier=Constants.generateUUID();PropertiesStorage.set("instanceIdentifier",this._instanceIdentifier);}else{this._instanceIdentifier=storedIdentifier;}}
return this._instanceIdentifier;},getRequestIdentifier:function(){let instanceIdentifier=this.getInstanceIdentifier();let timestamp=new Date().getTime();return instanceIdentifier+"*"+timestamp;},_markObjectDirty:function(object){if(!this._dirtyObjects){this._dirtyObjects=[];}
let objectType=object.constructor.name;let entry={};entry.type=objectType;switch(objectType){case"Account":let userId=object.get("userId");let isSandboxAccount=object.get("isSandboxAccount");let key=objectType+"."+userId+"."+isSandboxAccount;entry.userId=userId;entry.isSandboxAccount=isSandboxAccount;this._dirtyObjects[key]=entry;break;case"Item":let itemId=object.get("itemId");key=objectType+"."+itemId;entry.itemId=itemId;this._dirtyObjects[key]=entry;break;case"Transaction":itemId=object.get("itemId");let transactionId=object.get("transactionId");key=objectType+"."+itemId+"."+transactionId;entry.itemId=itemId;entry.transactionId=transactionId;this._dirtyObjects[key]=entry;break;case"FavoriteSearch":userId=object.get("userId");let searchName=object.get("searchName");key=objectType+"."+userId+"."+searchName;entry.object=object;this._dirtyObjects[key]=entry;break;case"FavoriteSeller":userId=object.get("userId");let sellerId=object.get("sellerId");key=objectType+"."+userId+"."+sellerId;entry.object=object;this._dirtyObjects[key]=entry;break;case"SystemMessage":let messageId=object.get("messageId");userId=object.get("userId");key=objectType+"."+messageId+"."+userId;entry.object=object;this._dirtyObjects[key]=entry;break;default:Logger.error("Unable to mark object of type \""+objectType+"\" "+
"as dirty, because it is not a recognised type.",Logger.DUMP_STACK);}},_flushDirtyObjects:function(){if(typeof(StorageHelper)=="undefined"){Cu.import("resource://ebaycompanion/helpers/storageHelper.js");}
try{if(!this._dirtyObjects){return;}
StorageHelper.connection.beginTransaction();for each(let[key,entry]in Iterator(this._dirtyObjects)){switch(entry.type){case"Account":let account=this._activeAccount;if(account){ObjectsStorage.store(account);}
break;case"Item":let item=this._items[entry.itemId];if(item){ObjectsStorage.addItemToAccount(this._items[entry.itemId],this._activeAccount);}
break;case"Transaction":let transactions=this._transactions[entry.itemId];if(transactions&&transactions[entry.transactionId]){ObjectsStorage.store(transactions[entry.transactionId]);}
break;case"FavoriteSearch":ObjectsStorage.store(entry.object);break;case"FavoriteSeller":ObjectsStorage.store(entry.object);break;case"SystemMessage":ObjectsStorage.store(entry.object);break;default:Logger.error("Unable to flush dirty object of type "+
"\""+entry.type+"\" because it is not a "+
"recognised type.");}
delete this._dirtyObjects[key];}
StorageHelper.connection.commitTransaction();}
catch(e){Logger.exception(e);StorageHelper.connection.rollbackTransaction();}},_removeFromDirtyObjects:function(object){let objectType=object.constructor.name;let entry={};entry.type=objectType;let key=null;switch(objectType){case"Account":let userId=object.get("userId");let isSandboxAccount=object.get("isSandboxAccount");key=objectType+"."+userId+"."+isSandboxAccount;break;case"Item":let itemId=object.get("itemId");key=objectType+"."+itemId;break;case"Transaction":itemId=object.get("itemId");let transactionId=object.get("transactionId");key=objectType+"."+itemId+"."+transactionId;break;case"FavoriteSearch":userId=object.get("userId");let searchName=object.get("searchName");key=objectType+"."+userId+"."+searchName;break;case"FavoriteSeller":userId=object.get("userId");let sellerId=object.get("sellerId");key=objectType+"."+userId+"."+sellerId;break;case"SystemMessage":let messageId=object.get("messageId");userId=object.get("userId");key=objectType+"."+messageId+"."+userId;break;default:Logger.error("Unable to remvoe object of type \""+objectType+"\" "+
"from dirty list, because it is not a recognised type.",Logger.DUMP_STACK);}
if(key&&this._dirtyObjects){delete this._dirtyObjects[key];}},_loadDataFromStorage:function(){this._items=[];this._transactions=[];this._favoriteSellers=[];this._favoriteSearches=[];let storedItems=ObjectsStorage.itemsForAccount(this._activeAccount);for(let i=0;i<storedItems.length;i++){let itemId=storedItems[i].get("itemId");this._items[itemId]=storedItems[i];}
let storedTransactions=ObjectsStorage.transactionsForAccount(this._activeAccount);for(let i=0;i<storedTransactions.length;i++){let transaction=storedTransactions[i];let itemId=transaction.get("itemId");let transactionId=transaction.get("transactionId");if(!this._transactions[itemId]){this._transactions[itemId]=[];}
this._transactions[itemId][transactionId]=transaction;}
this._favoriteSellers=ObjectsStorage.favoriteSellersForAccount(this._activeAccount);Observers.notify(null,"ebay-favorite-sellers-updated",null);this._favoriteSearches=ObjectsStorage.favoriteSearchesForAccount(this._activeAccount);Observers.notify(null,"ebay-favorite-searches-updated",null);Observers.notify(null,"ebay-sidebar-list-reset","sidebarList");}};Datasource._init();