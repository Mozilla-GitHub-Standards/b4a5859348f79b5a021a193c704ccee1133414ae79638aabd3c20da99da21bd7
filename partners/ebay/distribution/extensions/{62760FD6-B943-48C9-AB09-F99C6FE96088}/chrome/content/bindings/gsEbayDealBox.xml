<?xml version="1.0"?>

<!--
  - Copyright (C) 2007-2011 eBay Inc. All Rights Reserved.
  -->

<!DOCTYPE window SYSTEM "chrome://ebaycompanion/locale/strings.dtd">

<bindings xmlns="http://www.mozilla.org/xbl"
  xmlns:xbl="http://www.mozilla.org/xbl"
  xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  xmlns:html="http://www.w3.org/1999/xhtml">

  <!-- ebay deal box -->
  <binding id="gs-ebay-deal-box">
    <resources>
      <stylesheet src="chrome://ebaycompanion/skin/dealBox.css" />
      <stylesheet src="chrome://ebaycompanion-os/skin/dealBox.css" />
    </resources>

    <content>
      <xul:hbox anonid="gs-ebay-deal-container"
        class="gs-ebay-deal-container" flex="1"
        xbl:inherits="gsebayfocused">
        <xul:stack flex="1">
          <xul:hbox anonid="gs-ebay-deal-background"
            class="gs-ebay-deal-background" flex="1" />
          <xul:hbox flex="1">
            <xul:vbox anonid="gs-ebay-deal-state-box"
              class="gs-ebay-deal-state-box" />
            <xul:vbox class="gs-ebay-deal-content-box" flex="1">
              <xul:hbox class="gs-ebay-deal-top-box">
                <xul:label anonid="gs-ebay-deal-state-label"
                  class="gs-ebay-deal-state-label"
                  value="&ecSidebar.daily.deals.label;" flex="1" />
              </xul:hbox>
              <xul:hbox class="gs-ebay-deal-main-box">
                <xul:vbox class="gs-ebay-deal-image-container">
                  <html:canvas anonid="gs-ebay-deal-canvas"
                    class="gs-ebay-deal-image" width="58" height="58">
                  </html:canvas>
                  <xul:image anonid="gs-ebay-deal-canvas-image" hidden="true" />
                </xul:vbox>
                <xul:vbox class="gs-ebay-deal-content-right" flex="1">
                  <xul:gsebaydescription anonid="gs-ebay-deal-description"
                    class="gs-ebay-deal-description"
                    descriptionclass="gs-ebay-deal-description-internal" />
                  <xul:hbox class="gs-ebay-deal-price-box">
                    <xul:label anonid="gs-ebay-deal-price-label"
                      class="gs-ebay-deal-price-label" />
                    <xul:label anonid="gs-ebay-deal-savings-label" flex="1"
                      class="gs-ebay-deal-savings-label" crop="end" />
                  </xul:hbox>
                  <xul:hbox flex="1" align="start">
                    <xul:hbox class="gs-ebay-deal-shipping-box" flex="1">
                      <xul:label anonid="gs-ebay-deal-shipping-label" flex="1"
                        class="gs-ebay-deal-shipping-label" crop="end" />
                    </xul:hbox>
                    <xul:hbox class="gs-ebay-deal-action-box">
                      <xul:gsebaybutton anonid="gs-ebay-deal-action-button"
                        class="gs-ebay-deal-action-button" gsebaysize="small"
                        tooltiptext="" />
                    </xul:hbox>
                  </xul:hbox>
                </xul:vbox>
              </xul:hbox>
            </xul:vbox>
          </xul:hbox>
        </xul:stack>
        <xul:vbox anonid="gs-ebay-deal-details-open"
          class="gs-ebay-deal-details-open" pack="center" collapsed="true">
          <xul:image anonid="gs-ebay-deal-details-open-image"
            class="gs-ebay-deal-details-open-image"/>
        </xul:vbox>
      </xul:hbox>
    </content>

    <implementation>
      <!-- Associated deal. -->
      <field name="_deal">null</field>

      <!-- Property to accessed the deal. -->
      <property name="deal">
        <getter>
          return this._deal;
        </getter>
        <setter>
          <![CDATA[
            this._deal = val;
            this._updateDeal();
          ]]>
        </setter>
      </property>

      <!--
        - Destructor.
        -->
      <destructor>
        <![CDATA[
          this.deal = null;
        ]]>
      </destructor>

      <!--
        - Gets the element from its id.
        - @param aId the element id.
        - @return the element with the id.
        -->
      <method name="_getElement">
        <parameter name="aId" />
        <body>
          <![CDATA[
            return document.getAnonymousElementByAttribute(this, "anonid", aId);
          ]]>
        </body>
      </method>

      <!--
        - Gets the price label of the deal element with currency symbol.
        - @return the price label.
        -->
      <method name="_getDealPrice">
        <body>
          <![CDATA[
            let deal = this.deal;
            let priceLabel = "";
            let currency = deal.get("currency");
            let price = deal.get("currentPrice");
            if (currency.length > 0 && price > 0) {
              priceLabel = EbayCompanion.Constants.formatNumber(price, 2);

              priceLabel =
                EbayCompanion.Constants.addCurrencySymbol(priceLabel, currency);
            }

            return EbayCompanion.Constants.getUTF8(priceLabel);
          ]]>
        </body>
      </method>

      <!--
        - Gets the shipping price label
        - @return the shipping price label.
        -->
      <method name="_getDealShippingLabel">
        <body>
          <![CDATA[
            let deal = this.deal;
            let priceLabel = "";
            let currency = deal.get("currency");
            let price = deal.get("shippingCost");
            if (currency.length > 0 && price > 0) {
              priceLabel = EbayCompanion.Constants.formatNumber(price, 2);
              priceLabel =
                EbayCompanion.Constants.addCurrencySymbol(priceLabel, currency);
              priceLabel = EbayCompanion.Constants.getUTF8(priceLabel);
            } else {
              let stringBundle = EbayCompanion.Constants.stringBundle;
              priceLabel =
                stringBundle.getString("ecDeal.label.free.postage");
            }

            return priceLabel;
          ]]>
        </body>
      </method>

      <!--
        - Gets the action button label.
        - @param aItemState the item state.
        - @return the button label.
        -->
      <method name="_getActionButtonLabel">
        <body>
          <![CDATA[
            let stringBundle = EbayCompanion.Constants.stringBundle;
            let buttonCommand = "view";
            let buttonLabel = "";

            if (buttonCommand) {
              buttonLabel =
                stringBundle.getString("ecItem.button." + buttonCommand);
              this.parentNode.buttonAction = buttonCommand;
            }

             return buttonLabel;
          ]]>
        </body>
      </method>

      <!--
        - Gets the savings rate label.
        - @return the savings rate label.
        -->
      <method name="_getSavingsRateLabel">
        <body>
          <![CDATA[
            let deal = this.deal;
            let stringBundle = EbayCompanion.Constants.stringBundle;
            let savingsRateLabel = "";
            let savingsRate = deal.get("savingsRate");
            if (null == savingsRate || savingsRate == 0) {
              savingsRate = deal.get("savingsRateText");
            }

            let prefService = EbayCompanion.Constants.rootPrefService;
            let language =
              prefService.getCharPref("general.useragent.locale").toUpperCase();
            let languageArray = language.split("-");
            let siteId =
              EbayCompanion.Constants.siteIdForSite(
                EbayCompanion.Datasource.homeSite());
            switch(languageArray[0]) {
              case "DE":
              case "FR":
              case "EN":
                if (!isNaN(savingsRate)) {
                  if (siteId == 0 || siteId == 3 ||
                      siteId == 210 || siteId == 77) {
                    savingsRateLabel =
                      stringBundle.getString(
                        "ecDeal.label.savings.rate", [savingsRate]);
                  } else if (siteId == 15) {
                    savingsRateLabel =
                      "Save " + savingsRate + "%";
                  } else if (siteId == 2) {
                    savingsRateLabel =
                      "Save %" + savingsRate;
                  }
                } else {
                  savingsRateLabel = savingsRate;
                }
                  break;
            }
            return savingsRateLabel;
          ]]>
        </body>
      </method>

      <!--
        - Updates the deal info in the binding.
        -->
      <method name="_updateDeal">
        <body>
          <![CDATA[
            const IMAGE_SIZE = 58;
            let dealCanvas = this._getElement("gs-ebay-deal-canvas");
            let dealCanvasCtx = dealCanvas.getContext('2d');
            let dealCanvasImage = this._getElement("gs-ebay-deal-canvas-image");
            let dealCanvasFile = null;
            let dealDescription = this._getElement("gs-ebay-deal-description");
            let dealPrice = this._getElement("gs-ebay-deal-price-label");
            let dealSavingsRate = this._getElement("gs-ebay-deal-savings-label");
            let dealShipping = this._getElement("gs-ebay-deal-shipping-label");
            let dealActionButton = this._getElement("gs-ebay-deal-action-button");
            let deal = this.deal;

            // because the sidebar deal image is max 58X58, then we have to
            // process the image, no matter if it is the thumbnail or not
            // note that the thumbnail might be less than 58px in one of its
            // dimensions, and this will cause image "crispness" because it has
            // to be scaled up.
            if (deal) {
              let processImage = true;
              let imageSrc = deal.get("thumbnailUrl");
              if (imageSrc == null || imageSrc.length == 0) {
                imageSrc = deal.get("imageUrl");
                if (imageSrc == null || imageSrc.length == 0) {
                  processImage = false;
                }
              }

              // here we scale and crop the image to make it fit the 58X58 box
              let img = new Image();
              let height, width;
              img.onload = function() {
                if (processImage && img) {
                  height = img.height;
                  width = img.width;
                  let ratio = height / width;
                  let sX, sY, sHeight, sWidth;
                  let diffH = 0, diffW = 0;

                  // image is bigger or smaller than 58px in its smallest
                  // dimension, so we have to scale the image so its smallest
                  // size is 58px, and then crop a 58X58 section from it
                  if (ratio > 1) { // height > width
                    // image is bigger/smaller than 58px in its smallest dimension
                    // (width) so we have to crop a square the size of that
                    // dimension and scale it down/up to 58X58
                    diffH = height - width;
                    sX = 0;
                    sY = Math.floor(diffH / 2);
                    sHeight = width;
                    sWidth = width;
                  } else {
                    // image is bigger/smaller than 58px in its smallest dimension
                    // (height) so we have to crop a square the size of that
                    // dimension and scale it down/up to 58X58
                    diffW = width - height;
                    sX = Math.floor(diffW / 2);
                    sY = 0;
                    sHeight = height;
                    sWidth = height;
                  }

                  //dump("height: " + height + "/width: " + width +
                  // "/sX: " + sX + "/sY: " + sY +
                  // "/sHeight: " + sHeight + "/sWidth: " + sWidth + "\n");
                  try {
                    dealCanvasCtx.drawImage(
                      img, sX, sY, sWidth, sHeight, 0, 0,
                      IMAGE_SIZE, IMAGE_SIZE);
                  } catch (e) {
                    // for some reason this method throws an exception on
                    // Firefox 3.6, but still works, so we just prevent it from
                    // generating the error console entry
                  }
                }

                if (dealCanvas.mozGetAsFile) {
                  dealCanvas.hidden = true;
                  dealCanvasImage.hidden = false;
                  dealCanvasFile =
                    dealCanvas.mozGetAsFile(deal.get("itemId") + ".png");
                  dealCanvasImage.src = dealCanvasFile.getAsDataURL();
                }

                img = null;
              }

              // if the deal has no image, we have to clear the canvas so the
              // default background is shown correctly and not the image of
              // another deal (specially for desktop alerts)
              if (!imageSrc || imageSrc.length == 0) {
                dealCanvasCtx.clearRect(0, 0, IMAGE_SIZE, IMAGE_SIZE);
              }
              img.src = imageSrc;

              dealDescription.textContent =
                EbayCompanion.Constants.getUTF8(deal.get("title"));
              dealPrice.value = this._getDealPrice();

              dealSavingsRate.value = this._getSavingsRateLabel();

              dealShipping.value = this._getDealShippingLabel();
              dealActionButton.setAttribute(
                "label", this._getActionButtonLabel());
            } else {
              dealCanvasCtx.clearRect(0, 0, IMAGE_SIZE, IMAGE_SIZE);
            }
          ]]>
        </body>
      </method>

      <!--
        - Displays the item details button
        -->
      <method name="onMouseOver">
        <body>
          <![CDATA[
            let openBox = this._getElement("gs-ebay-deal-details-open");

            if (!openBox.hasAttribute("animated")) {
              width = 0;
              INCREMENT = 1;
              LIMIT = 19;
              openBox.removeAttribute("collapsed");

              let animationBox = function() {
                width += INCREMENT;
                openBox.style.width = width + "px";

                if (width < LIMIT) {
                  window.setTimeout(animationBox, 0);
                } else {
                  openBox.setAttribute("animated", true);
                }
              };

              animationBox();
            }
        ]]>
        </body>
      </method>

      <!--
        - Hides the item details button
        -->
      <method name="onMouseOut">
        <body>
          <![CDATA[
            let openBox = this._getElement("gs-ebay-deal-details-open");
            let that = this;

            openBox.removeAttribute("animated", true);
            width = 19;
            INCREMENT = -1;
            LIMIT = 0;

            let animationBox = function() {
              width += INCREMENT;
              openBox.style.width = width + "px";

              if (width > LIMIT) {
                window.setTimeout(animationBox, 0);
              } else {
                that.setContainerHover(false);
                openBox.setAttribute("collapsed", true);
              }
            };

            animationBox();
          ]]>
        </body>
      </method>

      <!--
        - Set item container hover
        - @param aValue true or false
        -->
      <method name="setContainerHover">
        <parameter name="aValue" />
        <body>
          <![CDATA[
            let dealContainer = this._getElement("gs-ebay-deal-container");

            if (aValue) {
              dealContainer.setAttribute("ebayhover", true);
            } else {
              dealContainer.removeAttribute("ebayhover");
            }
          ]]>
        </body>
      </method>
    </implementation>

  </binding>
</bindings>
