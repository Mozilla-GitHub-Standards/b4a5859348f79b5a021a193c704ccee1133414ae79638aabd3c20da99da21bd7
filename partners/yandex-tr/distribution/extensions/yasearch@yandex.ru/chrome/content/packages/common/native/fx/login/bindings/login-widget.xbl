<?xml version='1.0'?>
<!DOCTYPE bindings [
<!ENTITY % settings SYSTEM "/native/fx/login.dtd">
%settings;
]>

<bindings xmlns:xbl="http://www.mozilla.org/xbl" xmlns="http://www.mozilla.org/xbl" xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding extends="//toolkit/native/bindings/widget.xml#widget" id="widget">
        <resources>
            <stylesheet src="../styles/login.css"/>
        </resources>

        <content>
            <toolbarbutton anonid="login-button" class="chromeclass-toolbar-additional toolbarbutton-1 yauth-button" label="&login.enter.label;" noauth-tooltip-text="&login.tooltiptext;" tooltip="yb-login-tooltip" type="menu" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" yb-button-icon-hidden="true" yb-default-tooltip-hidden="true">
                <menupopup anonid="login-menupopup">
                    <menu anonid="other-logins" label="&login.menu.other-account.label;">
                        <menupopup/>
                    </menu>
                    <menuitem anonid="login-menuitem-switch" label="&login.switch.label;"/>
                    <menuseparator anonid="login-menuitem-users-sep"/>
                    <menuitem anonid="login-menuitem-setting" label="&login.settings.label;"/>
                    <menuitem anonid="login-menuitem-passport" label="&login.passport.label;"/>
                    <menuitem anonid="login-menuitem-logout" label="&login.logout.label;"/>
                </menupopup>
            </toolbarbutton>

            <tooltip id="yb-login-tooltip" noautohide="true" onpopupshowing="event.stopPropagation(); return _onTooltipShowing(this);" orient="vertical" xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"/>
        </content>

        <implementation implements="nsIDOMEventListener">
            <field name="title">"&login.name;"</field>
            <field name="ID">this.getAttribute("id")</field>
            <field name="API">this.module.API</field>
            <field name="yauth">this.API.Passport</field>

            <field name="_button" readonly="true">document.getAnonymousElementByAttribute(this, "anonid", "login-button")</field>
            <field name="_menu" readonly="true">document.getAnonymousElementByAttribute(this, "anonid", "login-menupopup")</field>
            <field name="_switch" readonly="true">document.getAnonymousElementByAttribute(this, "anonid", "login-menuitem-switch")</field>
            <field name="_otherLogins" readonly="true">document.getAnonymousElementByAttribute(this, 'anonid', 'other-logins')</field>
            <field name="_logout" readonly="true">document.getAnonymousElementByAttribute(this, "anonid", "login-menuitem-logout")</field>

            <field name="_switchToAccountId">null</field>

            <constructor><![CDATA[    this.yauth.addListener(this.yauth.EVENTS.AUTH_STATE_CHANGED, this);
    this._menu.addEventListener("command", this);]]></constructor>

            <method name="destroy">
                <body><![CDATA[    this.yauth.removeListener(this.yauth.EVENTS.AUTH_STATE_CHANGED, this);
    this._menu.removeEventListener("command", this);]]></body>
            </method>

            <method name="_updateMenu">
                <parameter name="aMenuItems"/>
                <body><![CDATA[    let target = this._menu.firstChild;
    while (this._menu.firstChild && this._menu.firstChild !== this._otherLogins) {
        this._menu.removeChild(this._menu.firstChild);
    }
    let desiredTopLevelMenuAccountsNumber = 7;
    let subMenuMinimumItemsThreshold = 2;
    let topLevelItemsNumber = 7;
    let useSubmenu = aMenuItems.length > desiredTopLevelMenuAccountsNumber;
    if (useSubmenu) {
        let diff = aMenuItems.length - desiredTopLevelMenuAccountsNumber;
        if (diff < subMenuMinimumItemsThreshold) {
            topLevelItemsNumber -= subMenuMinimumItemsThreshold - diff;
        }
    } else {
        this._otherLogins.hidden = true;
        topLevelItemsNumber = aMenuItems.length;
    }
    for (let i = 0; i < topLevelItemsNumber; i++) {
        this._menu.insertBefore(aMenuItems[i], this._otherLogins);
    }
    if (useSubmenu) {
        this._otherLogins.hidden = false;
        let subMenu = this._otherLogins.firstChild;
        while (subMenu.firstChild) {
            subMenu.removeChild(subMenu.firstChild);
        }
        for (let i = topLevelItemsNumber; i < aMenuItems.length; i++) {
            subMenu.appendChild(aMenuItems[i]);
        }
    }]]></body>
            </method>

            <method name="_goToAddress">
                <parameter name="aAddress"/>
                <body><![CDATA[    let url;
    switch (aAddress) {
    case "passport":
        url = this.yauth.authdefs.LINKS.AUTH_PASSPORT_URL + "/passport?mode=passport";
        break;
    case "settings":
        url = "http://tune." + this.yauth.authdefs.DOMAINS.MAIN_DOMAIN;
        break;
    case "mail":
        url = "https://mail." + this.yauth.authdefs.DOMAINS.MAIN_DOMAIN;
        break;
    case "main":
        url = "https://" + this.yauth.authdefs.DOMAINS.MAIN_DOMAIN;
        break;
    default:
        return;
    }
    if (!url) {
        return;
    }
    this.API.Controls.navigateBrowser({
        url: url,
        target: "new tab"
    });]]></body>
            </method>

            <method name="_onTooltipShowing">
                <parameter name="tooltip"/>
                <body><![CDATA[    while (tooltip.firstChild) {
        tooltip.removeChild(tooltip.firstChild);
    }
    let labels = this.yauth.authorizedAccounts.map(u => u.fullName);
    if (!labels.length) {
        labels = [this._button.getAttribute("noauth-tooltip-text")];
    }
    let defaultAccount = labels.pop();
    labels.splice(0, 0, defaultAccount);
    labels.forEach(function (labelValue) {
        let label = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul", "label");
        label.setAttribute("value", labelValue);
        tooltip.appendChild(label);
    });]]></body>
            </method>

            <method name="_sendAccountMenuItemCommandStatistics">
                <parameter name="aTarget"/>
                <body><![CDATA[    let menuItemIndex = 1;
    let prevSiblingNode = aTarget;
    while (prevSiblingNode = prevSiblingNode.previousElementSibling) {
        menuItemIndex++;
    }
    this.module.sendStatistics("slice.loginlist." + menuItemIndex);]]></body>
            </method>

            <method name="_doAccountMenuItemCommandAction">
                <parameter name="aMenuItem"/>
                <body><![CDATA[    if (aMenuItem.getAttribute("yb-default-user")) {
        let goToKey = "mail";
        let defaultAccount = this.yauth.defaultAccount;
        if (defaultAccount.isSocial) {
            goToKey = "main";
        }
        this._goToAddress(goToKey);
        return;
    }
    let accountUid = aMenuItem.getAttribute("yb-user-uid");
    if (!accountUid) {
        return;
    }
    let account = this.yauth.getAuthorizedAccount(accountUid);
    if (account) {
        this._switchToAccountId = account.uid;
    }
    this.module.switchAccount(accountUid);]]></body>
            </method>

            <method name="handleEvent">
                <parameter name="aEvent"/>
                <body><![CDATA[    switch (aEvent.type) {
    case "command":
        let target = aEvent.target;
        if (target.localName !== "menuitem") {
            return;
        }
        aEvent.stopPropagation();
        let action;
        let anonid = target.getAttribute("anonid");
        switch (anonid) {
        case "login-menuitem-switch":
            action = "slice.enternewname";
            this.module.switchAccount();
            break;
        case "login-menuitem-setting":
            action = "slice.settings";
            this._goToAddress("settings");
            break;
        case "login-menuitem-passport":
            action = "slice.passport";
            this._goToAddress("passport");
            break;
        case "login-menuitem-logout":
            action = "slice.logout";
            this.module.logoutDefaultAccount();
            break;
        default:
            break;
        }
        if (action) {
            this.module.sendStatistics(action);
            return;
        }
        this._sendAccountMenuItemCommandStatistics(target);
        this._doAccountMenuItemCommandAction(target);
        break;
    }]]></body>
            </method>

            <method name="observe">
                <parameter name="subject"/>
                <parameter name="topic"/>
                <parameter name="data"/>
                <body><![CDATA[    switch (topic) {
    case this.yauth.EVENTS.AUTH_STATE_CHANGED:
        let defaultAccount = data.defaultAccount;
        if (this._switchToAccountId) {
            if (this._switchToAccountId === (defaultAccount && defaultAccount.uid)) {
                let url = "https://mail." + this.yauth.authdefs.DOMAINS.MAIN_DOMAIN;
                if (defaultAccount.isSocial) {
                    url = "http://" + this.yauth.authdefs.DOMAINS.MAIN_DOMAIN;
                }
                this.API.Controls.navigateBrowser({
                    url: url,
                    target: "new tab"
                });
            }
            this._switchToAccountId = null;
        }
        break;
    default:
        return;
    }]]></body>
            </method>
        </implementation>

        <handlers>
            <handler event="popupshowing"><![CDATA[    if (event.originalTarget !== this._menu) {
        return;
    }
    let authorized = this.yauth.isAuthorized();
    if (authorized) {
        this.module.sendStatistics("button.authon");
        let menu = this.module.buildMenu();
        this._updateMenu(menu);
    } else {
        this.module.onButtonClick(event, this);
        return false;
    }
    return true;]]></handler>
        </handlers>
    </binding>

    <binding extends="chrome://global/content/bindings/menu.xml#menuitem-iconic" id="avatar-menuitem">
        <content>
            <xul:hbox align="center" class="avatar-container" xbl:inherits="selected,_moz-menuactive,disabled,checked" pack="end">
                <xul:hbox class="menu-iconic-avatar-icon" xbl:inherits="bg-image=image,src"/>
            </xul:hbox>
            <xul:label class="menu-iconic-text" flex="1" xbl:inherits="value=label,accesskey,crop"/>
            <xul:label class="default-user-selector" flex="100" value="&#x2713;"/>
            <xul:hbox anonid="accel" class="menu-accel-container">
                <xul:label class="menu-iconic-accel" xbl:inherits="value=acceltext"/>
            </xul:hbox>
        </content>

        <implementation>
            <field name="_avatarIcon" readonly="true">
                document.getAnonymousElementByAttribute(this, "class", "menu-iconic-avatar-icon")
            </field>

            <constructor><![CDATA[    let avatarSrc = this._avatarIcon.getAttribute("bg-image");
    if (!avatarSrc) {
        return;
    }
    this._avatarIcon.style.backgroundImage = "url('" + avatarSrc + "')";]]></constructor>
        </implementation>
    </binding>

</bindings>
